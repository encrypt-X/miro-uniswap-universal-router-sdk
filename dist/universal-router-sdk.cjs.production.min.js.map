{"version":3,"file":"universal-router-sdk.cjs.production.min.js","sources":["../src/entities/Command.ts","../src/entities/NFTTrade.ts","../src/utils/routerCommands.ts","../src/utils/constants.ts","../src/entities/protocols/uniswap.ts","../src/utils/numbers.ts","../src/utils/inputTokens.ts","../src/swapRouter.ts","../src/entities/protocols/cryptopunk.ts","../src/entities/protocols/foundation.ts","../src/entities/protocols/looksRareV2.ts","../src/entities/protocols/nft20.ts","../src/entities/protocols/nftx.ts","../src/entities/protocols/seaport.ts","../src/entities/protocols/sudoswap.ts","../src/entities/protocols/x2y2.ts","../src/entities/protocols/unwrapWETH.ts","../src/entities/protocols/wrapSTETH.ts","../src/entities/protocols/unwrapSTETH.ts"],"sourcesContent":["import { RoutePlanner } from '../utils/routerCommands'\n\nexport type TradeConfig = {\n  allowRevert: boolean\n}\n\nexport enum RouterTradeType {\n  UniswapTrade = 'UniswapTrade',\n  NFTTrade = 'NFTTrade',\n  UnwrapWETH = 'UnwrapWETH',\n  WrapSTETH = 'WrapSTETH',\n  UnwrapSTETH = 'UnwrapSTETH',\n}\n\n// interface for entities that can be encoded as a Universal Router command\nexport interface Command {\n  tradeType: RouterTradeType\n  encode(planner: RoutePlanner, config: TradeConfig): void\n}\n","import invariant from 'tiny-invariant'\nimport { BigNumber, BigNumberish } from 'ethers'\nimport { SeaportData } from './protocols/seaport'\nimport { FoundationData } from './protocols/foundation'\nimport { NFTXData } from './protocols/nftx'\nimport { NFT20Data } from './protocols/nft20'\nimport { RoutePlanner } from '../utils/routerCommands'\nimport { Command, RouterTradeType, TradeConfig } from './Command'\nimport { SudoswapData } from './protocols/sudoswap'\nimport { CryptopunkData } from './protocols/cryptopunk'\nimport { X2Y2Data } from './protocols/x2y2'\nimport { ElementData } from './protocols/element-market'\nimport { LooksRareV2Data } from './protocols/looksRareV2'\n\nexport type SupportedProtocolsData =\n  | SeaportData\n  | FoundationData\n  | NFTXData\n  | LooksRareV2Data\n  | X2Y2Data\n  | CryptopunkData\n  | NFT20Data\n  | SudoswapData\n  | ElementData\n\nexport abstract class NFTTrade<T> implements Command {\n  readonly tradeType: RouterTradeType = RouterTradeType.NFTTrade\n  readonly orders: T[]\n  readonly market: Market\n\n  constructor(market: Market, orders: T[]) {\n    invariant(orders.length > 0, 'no buy Items')\n    this.market = market\n    this.orders = orders\n  }\n\n  abstract encode(planner: RoutePlanner, config: TradeConfig): void\n\n  abstract getBuyItems(): BuyItem[]\n\n  // optional parameter for the markets that accept ERC20s not just ETH\n  abstract getTotalPrice(token?: string): BigNumber\n}\n\nexport type BuyItem = {\n  tokenAddress: string\n  tokenId: BigNumberish\n  tokenType: TokenType\n  amount?: BigNumberish // for 1155\n}\n\nexport enum Market {\n  Foundation = 'foundation',\n  LooksRareV2 = 'looksrareV2',\n  NFT20 = 'nft20',\n  NFTX = 'nftx',\n  Seaport = 'seaport',\n  Sudoswap = 'Sudoswap',\n  Cryptopunks = 'cryptopunks',\n  X2Y2 = 'x2y2',\n  Element = 'element',\n}\n\nexport enum TokenType {\n  ERC721 = 'ERC721',\n  ERC1155 = 'ERC1155',\n  Cryptopunk = 'Cryptopunk',\n}\n","import { defaultAbiCoder } from 'ethers/lib/utils'\n\n/**\n * CommandTypes\n * @description Flags that modify a command's execution\n * @enum {number}\n */\nexport enum CommandType {\n  V3_SWAP_EXACT_IN = 0x00,\n  V3_SWAP_EXACT_OUT = 0x01,\n  PERMIT2_TRANSFER_FROM = 0x02,\n  PERMIT2_PERMIT_BATCH = 0x03,\n  SWEEP = 0x04,\n  TRANSFER = 0x05,\n  PAY_PORTION = 0x06,\n\n  V2_SWAP_EXACT_IN = 0x08,\n  V2_SWAP_EXACT_OUT = 0x09,\n  PERMIT2_PERMIT = 0x0a,\n  WRAP_ETH = 0x0b,\n  UNWRAP_WETH = 0x0c,\n  PERMIT2_TRANSFER_FROM_BATCH = 0x0d,\n  BALANCE_CHECK_ERC20 = 0x0e,\n\n  // NFT-related command types\n  SEAPORT_V1_5 = 0x10,\n  LOOKS_RARE_V2 = 0x11,\n  NFTX = 0x12,\n  CRYPTOPUNKS = 0x13,\n  // 0x14\n  OWNER_CHECK_721 = 0x15,\n  OWNER_CHECK_1155 = 0x16,\n  SWEEP_ERC721 = 0x17,\n\n  X2Y2_721 = 0x18,\n  SUDOSWAP = 0x19,\n  NFT20 = 0x1a,\n  X2Y2_1155 = 0x1b,\n  FOUNDATION = 0x1c,\n  SWEEP_ERC1155 = 0x1d,\n  ELEMENT_MARKET = 0x1e,\n\n  SEAPORT_V1_4 = 0x20,\n  EXECUTE_SUB_PLAN = 0x21,\n  APPROVE_ERC20 = 0x22,\n  WRAP_STETH = 0x23,\n  UNWRAP_STETH = 0x24,\n}\n\nconst ALLOW_REVERT_FLAG = 0x80\n\nconst REVERTIBLE_COMMANDS = new Set<CommandType>([\n  CommandType.SEAPORT_V1_5,\n  CommandType.SEAPORT_V1_4,\n  CommandType.NFTX,\n  CommandType.LOOKS_RARE_V2,\n  CommandType.X2Y2_721,\n  CommandType.X2Y2_1155,\n  CommandType.FOUNDATION,\n  CommandType.SUDOSWAP,\n  CommandType.NFT20,\n  CommandType.EXECUTE_SUB_PLAN,\n  CommandType.CRYPTOPUNKS,\n  CommandType.ELEMENT_MARKET,\n])\n\nconst PERMIT_STRUCT =\n  '((address token,uint160 amount,uint48 expiration,uint48 nonce) details,address spender,uint256 sigDeadline)'\n\nconst PERMIT_BATCH_STRUCT =\n  '((address token,uint160 amount,uint48 expiration,uint48 nonce)[] details,address spender,uint256 sigDeadline)'\n\nconst PERMIT2_TRANSFER_FROM_STRUCT = '(address from,address to,uint160 amount,address token)'\nconst PERMIT2_TRANSFER_FROM_BATCH_STRUCT = PERMIT2_TRANSFER_FROM_STRUCT + '[]'\n\nconst ABI_DEFINITION: { [key in CommandType]: string[] } = {\n  // Batch Reverts\n  [CommandType.EXECUTE_SUB_PLAN]: ['bytes', 'bytes[]'],\n\n  // Permit2 Actions\n  [CommandType.PERMIT2_PERMIT]: [PERMIT_STRUCT, 'bytes'],\n  [CommandType.PERMIT2_PERMIT_BATCH]: [PERMIT_BATCH_STRUCT, 'bytes'],\n  [CommandType.PERMIT2_TRANSFER_FROM]: ['address', 'address', 'uint160'],\n  [CommandType.PERMIT2_TRANSFER_FROM_BATCH]: [PERMIT2_TRANSFER_FROM_BATCH_STRUCT],\n\n  // Uniswap Actions\n  [CommandType.V3_SWAP_EXACT_IN]: ['address', 'uint256', 'uint256', 'bytes', 'bool'],\n  [CommandType.V3_SWAP_EXACT_OUT]: ['address', 'uint256', 'uint256', 'bytes', 'bool'],\n  [CommandType.V2_SWAP_EXACT_IN]: ['address', 'uint256', 'uint256', 'address[]', 'bool'],\n  [CommandType.V2_SWAP_EXACT_OUT]: ['address', 'uint256', 'uint256', 'address[]', 'bool'],\n\n  // Token Actions and Checks\n  [CommandType.WRAP_ETH]: ['address', 'uint256'],\n  [CommandType.UNWRAP_WETH]: ['address', 'uint256'],\n  [CommandType.SWEEP]: ['address', 'address', 'uint256'],\n  [CommandType.SWEEP_ERC721]: ['address', 'address', 'uint256'],\n  [CommandType.SWEEP_ERC1155]: ['address', 'address', 'uint256', 'uint256'],\n  [CommandType.TRANSFER]: ['address', 'address', 'uint256'],\n  [CommandType.PAY_PORTION]: ['address', 'address', 'uint256'],\n  [CommandType.BALANCE_CHECK_ERC20]: ['address', 'address', 'uint256'],\n  [CommandType.OWNER_CHECK_721]: ['address', 'address', 'uint256'],\n  [CommandType.OWNER_CHECK_1155]: ['address', 'address', 'uint256', 'uint256'],\n  [CommandType.APPROVE_ERC20]: ['address', 'uint256'],\n  [CommandType.WRAP_STETH]: ['address', 'uint256'],\n  [CommandType.UNWRAP_STETH]: ['address', 'uint256'],\n\n  // NFT Markets\n  [CommandType.SEAPORT_V1_5]: ['uint256', 'bytes'],\n  [CommandType.SEAPORT_V1_4]: ['uint256', 'bytes'],\n  [CommandType.NFTX]: ['uint256', 'bytes'],\n  [CommandType.LOOKS_RARE_V2]: ['uint256', 'bytes'],\n  [CommandType.X2Y2_721]: ['uint256', 'bytes', 'address', 'address', 'uint256'],\n  [CommandType.X2Y2_1155]: ['uint256', 'bytes', 'address', 'address', 'uint256', 'uint256'],\n  [CommandType.FOUNDATION]: ['uint256', 'bytes', 'address', 'address', 'uint256'],\n  [CommandType.SUDOSWAP]: ['uint256', 'bytes'],\n  [CommandType.NFT20]: ['uint256', 'bytes'],\n  [CommandType.CRYPTOPUNKS]: ['uint256', 'address', 'uint256'],\n  [CommandType.ELEMENT_MARKET]: ['uint256', 'bytes'],\n}\n\nexport class RoutePlanner {\n  commands: string\n  inputs: string[]\n\n  constructor() {\n    this.commands = '0x'\n    this.inputs = []\n  }\n\n  addSubPlan(subplan: RoutePlanner): void {\n    this.addCommand(CommandType.EXECUTE_SUB_PLAN, [subplan.commands, subplan.inputs], true)\n  }\n\n  addCommand(type: CommandType, parameters: any[], allowRevert = false): void {\n    let command = createCommand(type, parameters)\n    this.inputs.push(command.encodedInput)\n    if (allowRevert) {\n      if (!REVERTIBLE_COMMANDS.has(command.type)) {\n        throw new Error(`command type: ${command.type} cannot be allowed to revert`)\n      }\n      command.type = command.type | ALLOW_REVERT_FLAG\n    }\n\n    this.commands = this.commands.concat(command.type.toString(16).padStart(2, '0'))\n  }\n}\n\nexport type RouterCommand = {\n  type: CommandType\n  encodedInput: string\n}\n\nexport function createCommand(type: CommandType, parameters: any[]): RouterCommand {\n  const encodedInput = defaultAbiCoder.encode(ABI_DEFINITION[type], parameters)\n  return { type, encodedInput }\n}\n","import { BigNumber } from 'ethers'\n\ntype ChainConfig = {\n  router: string\n  creationBlock: number\n  weth: string\n  steth: string\n  wsteth: string\n}\n\nexport const NOT_SUPPORTED_ON_CHAIN = '0x0000000000000000000000000000000000000000'\n\nconst CHAIN_CONFIGS: { [key: number]: ChainConfig } = {\n  // mainnet\n  [1]: {\n    router: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n    weth: '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2',\n    steth: '0xae7ab96520de3a18e5e111b5eaab095312d7fe84',\n    wsteth: '0x7f39c581f595b53c5cb19bd0b3f8da6c935e2ca0',\n    creationBlock: 17143817,\n  },\n  // goerli\n  [5]: {\n    router: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n    weth: '0xb4fbf271143f4fbf7b91a5ded31805e42b2208d6',\n    steth: '0x1643E812aE58766192Cf7D2Cf9567dF2C37e9B7F',\n    wsteth: '0x6320cD32aA674d2898A68ec82e869385Fc5f7E2f',\n    creationBlock: 8940568,\n  },\n  // sepolia\n  [11155111]: {\n    router: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n    weth: '0xfFf9976782d46CC05630D1f6eBAb18b2324d6B14',\n    steth: NOT_SUPPORTED_ON_CHAIN,\n    wsteth: NOT_SUPPORTED_ON_CHAIN,\n    creationBlock: 3543575,\n  },\n  // polygon\n  [137]: {\n    router: '0x643770E279d5D0733F21d6DC03A8efbABf3255B4',\n    weth: '0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270',\n    steth: NOT_SUPPORTED_ON_CHAIN,\n    wsteth: NOT_SUPPORTED_ON_CHAIN,\n    creationBlock: 46866777,\n  },\n  //polygon mumbai\n  [80001]: {\n    router: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n    weth: '0x9c3C9283D3e44854697Cd22D3Faa240Cfb032889',\n    steth: NOT_SUPPORTED_ON_CHAIN,\n    wsteth: NOT_SUPPORTED_ON_CHAIN,\n    creationBlock: 35176052,\n  },\n  //optimism\n  [10]: {\n    router: '0xeC8B0F7Ffe3ae75d7FfAb09429e3675bb63503e4',\n    weth: '0x4200000000000000000000000000000000000006',\n    steth: NOT_SUPPORTED_ON_CHAIN,\n    wsteth: NOT_SUPPORTED_ON_CHAIN,\n    creationBlock: 108825869,\n  },\n  // optimism goerli\n  [420]: {\n    router: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n    weth: '0x4200000000000000000000000000000000000006',\n    steth: NOT_SUPPORTED_ON_CHAIN,\n    wsteth: NOT_SUPPORTED_ON_CHAIN,\n    creationBlock: 8887728,\n  },\n  // arbitrum\n  [42161]: {\n    router: '0xeC8B0F7Ffe3ae75d7FfAb09429e3675bb63503e4',\n    weth: '0x82aF49447D8a07e3bd95BD0d56f35241523fBab1',\n    steth: NOT_SUPPORTED_ON_CHAIN,\n    wsteth: NOT_SUPPORTED_ON_CHAIN,\n    creationBlock: 125861718,\n  },\n  // arbitrum goerli\n  [421613]: {\n    router: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n    weth: '0xe39Ab88f8A4777030A534146A9Ca3B52bd5D43A3',\n    steth: NOT_SUPPORTED_ON_CHAIN,\n    wsteth: NOT_SUPPORTED_ON_CHAIN,\n    creationBlock: 18815277,\n  },\n  // celo\n  [42220]: {\n    router: '0x88a3ED7F21A3fCF6adb86b6F878C5B7a02D20e9b',\n    weth: NOT_SUPPORTED_ON_CHAIN,\n    steth: NOT_SUPPORTED_ON_CHAIN,\n    wsteth: NOT_SUPPORTED_ON_CHAIN,\n    creationBlock: 21116361,\n  },\n  // celo alfajores\n  [44787]: {\n    router: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n    weth: NOT_SUPPORTED_ON_CHAIN,\n    steth: NOT_SUPPORTED_ON_CHAIN,\n    wsteth: NOT_SUPPORTED_ON_CHAIN,\n    creationBlock: 17566658,\n  },\n  // binance smart chain\n  [56]: {\n    router: '0xeC8B0F7Ffe3ae75d7FfAb09429e3675bb63503e4',\n    weth: '0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c',\n    steth: NOT_SUPPORTED_ON_CHAIN,\n    wsteth: NOT_SUPPORTED_ON_CHAIN,\n    creationBlock: 31254967,\n  },\n  // avalanche\n  [43114]: {\n    router: '0x82635AF6146972cD6601161c4472ffe97237D292',\n    weth: '0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7',\n    steth: NOT_SUPPORTED_ON_CHAIN,\n    wsteth: NOT_SUPPORTED_ON_CHAIN,\n    creationBlock: 34491144,\n  },\n  // base goerli\n  [84531]: {\n    router: '0xd0872d928672ae2ff74bdb2f5130ac12229cafaf',\n    weth: '0x4200000000000000000000000000000000000006',\n    steth: NOT_SUPPORTED_ON_CHAIN,\n    wsteth: NOT_SUPPORTED_ON_CHAIN,\n    creationBlock: 6915289,\n  },\n  // base mainnet\n  [8453]: {\n    router: '0xeC8B0F7Ffe3ae75d7FfAb09429e3675bb63503e4',\n    weth: '0x4200000000000000000000000000000000000006',\n    steth: NOT_SUPPORTED_ON_CHAIN,\n    wsteth: NOT_SUPPORTED_ON_CHAIN,\n    creationBlock: 3229053,\n  },\n  // zkatana\n  [1261120]: {\n    router: '0x1a3165C512D06b015afB6bD760Cf22c056bE8CF7',\n    weth: '0xEbB3F7644F5D523B4cA7F5d1C94ea023f1D9b066',\n    steth: NOT_SUPPORTED_ON_CHAIN,\n    wsteth: NOT_SUPPORTED_ON_CHAIN,\n    creationBlock: 264552,\n  },\n  //SeiDev\n  [713715]: {\n    router: '0x0EB684486027f2F5cFb4C8a18897381706AeD534',\n    weth: '0x657389E6c95308BD24a9aCB40FDe474d4D580d63',\n    steth: NOT_SUPPORTED_ON_CHAIN,\n    wsteth: NOT_SUPPORTED_ON_CHAIN,\n    creationBlock: 264552,\n  },\n}\n\nexport const UNIVERSAL_ROUTER_ADDRESS = (chainId: number): string => {\n  if (!(chainId in CHAIN_CONFIGS)) throw new Error(`Universal Router not deployed on chain ${chainId}`)\n  return CHAIN_CONFIGS[chainId].router\n}\n\nexport const UNIVERSAL_ROUTER_CREATION_BLOCK = (chainId: number): number => {\n  if (!(chainId in CHAIN_CONFIGS)) throw new Error(`Universal Router not deployed on chain ${chainId}`)\n  return CHAIN_CONFIGS[chainId].creationBlock\n}\n\nexport const WETH_ADDRESS = (chainId: number): string => {\n  if (!(chainId in CHAIN_CONFIGS)) throw new Error(`Universal Router not deployed on chain ${chainId}`)\n\n  if (CHAIN_CONFIGS[chainId].weth == NOT_SUPPORTED_ON_CHAIN) throw new Error(`Chain ${chainId} does not have WETH`)\n\n  return CHAIN_CONFIGS[chainId].weth\n}\n\nexport const STETH_ADDRESS = (chainId: number): string => {\n  if (!(chainId in CHAIN_CONFIGS)) throw new Error(`Universal Router not deployed on chain ${chainId}`)\n\n  if (CHAIN_CONFIGS[chainId].steth == NOT_SUPPORTED_ON_CHAIN)\n    throw new Error(`Chain ${chainId} does not have STETH support`)\n\n  return CHAIN_CONFIGS[chainId].steth\n}\n\nexport const WSTETH_ADDRESS = (chainId: number): string => {\n  if (!(chainId in CHAIN_CONFIGS)) throw new Error(`Universal Router not deployed on chain ${chainId}`)\n\n  if (CHAIN_CONFIGS[chainId].wsteth == NOT_SUPPORTED_ON_CHAIN)\n    throw new Error(`Chain ${chainId} does not have WSTETH support`)\n\n  return CHAIN_CONFIGS[chainId].wsteth\n}\n\nexport const PERMIT2_ADDRESS = '0x000000000022D473030F116dDEE9F6B43aC78BA3'\n\nexport const CONTRACT_BALANCE = BigNumber.from(2).pow(255)\nexport const ETH_ADDRESS = '0x0000000000000000000000000000000000000000'\nexport const ZERO_ADDRESS = '0x0000000000000000000000000000000000000000'\nexport const MAX_UINT256 = BigNumber.from(2).pow(256).sub(1)\nexport const MAX_UINT160 = BigNumber.from(2).pow(160).sub(1)\n\nexport const SENDER_AS_RECIPIENT = '0x0000000000000000000000000000000000000001'\nexport const ROUTER_AS_RECIPIENT = '0x0000000000000000000000000000000000000002'\n\nexport const OPENSEA_CONDUIT_SPENDER_ID = 0\nexport const SUDOSWAP_SPENDER_ID = 1\n","import { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { Trade as V2Trade, Pair } from '@uniswap/v2-sdk'\nimport { Trade as V3Trade, Pool, encodeRouteToPath } from '@uniswap/v3-sdk'\nimport {\n  Trade as RouterTrade,\n  MixedRouteTrade,\n  Protocol,\n  IRoute,\n  RouteV2,\n  RouteV3,\n  MixedRouteSDK,\n  MixedRoute,\n  SwapOptions as RouterSwapOptions,\n  getOutputOfPools,\n  encodeMixedRouteToPath,\n  partitionMixedRouteByProtocol,\n} from '@uniswap/router-sdk'\nimport { Permit2Permit } from '../../utils/inputTokens'\nimport { Currency, TradeType, CurrencyAmount, Percent } from '@uniswap/sdk-core'\nimport { Command, RouterTradeType, TradeConfig } from '../Command'\nimport { SENDER_AS_RECIPIENT, ROUTER_AS_RECIPIENT, CONTRACT_BALANCE } from '../../utils/constants'\nimport { encodeFeeBips } from '../../utils/numbers'\nimport { BigNumber, BigNumberish } from 'ethers'\n\nexport type FlatFeeOptions = {\n  amount: BigNumberish\n  recipient: string\n}\n\n// the existing router permit object doesn't include enough data for permit2\n// so we extend swap options with the permit2 permit\nexport type SwapOptions = Omit<RouterSwapOptions, 'inputTokenPermit'> & {\n  inputTokenPermit?: Permit2Permit\n  payerIsRouter?: boolean\n  flatFee?: FlatFeeOptions\n}\n\nconst REFUND_ETH_PRICE_IMPACT_THRESHOLD = new Percent(50, 100)\n\ninterface Swap<TInput extends Currency, TOutput extends Currency> {\n  route: IRoute<TInput, TOutput, Pair | Pool>\n  inputAmount: CurrencyAmount<TInput>\n  outputAmount: CurrencyAmount<TOutput>\n}\n\n// Wrapper for uniswap router-sdk trade entity to encode swaps for Universal Router\n// also translates trade objects from previous (v2, v3) SDKs\nexport class UniswapTrade implements Command {\n  readonly tradeType: RouterTradeType = RouterTradeType.UniswapTrade\n  constructor(public trade: RouterTrade<Currency, Currency, TradeType>, public options: SwapOptions) {\n    if (!!options.fee && !!options.flatFee) throw new Error('Only one fee option permitted')\n  }\n\n  encode(planner: RoutePlanner, _config: TradeConfig): void {\n    let payerIsUser = !this.options.payerIsRouter\n\n    // If the input currency is the native currency, we need to wrap it with the router as the recipient\n    if (this.trade.inputAmount.currency.isNative) {\n      // TODO: optimize if only one v2 pool we can directly send this to the pool\n      planner.addCommand(CommandType.WRAP_ETH, [\n        ROUTER_AS_RECIPIENT,\n        this.trade.maximumAmountIn(this.options.slippageTolerance).quotient.toString(),\n      ])\n      // since WETH is now owned by the router, the router pays for inputs\n      payerIsUser = false\n    }\n    // The overall recipient at the end of the trade, SENDER_AS_RECIPIENT uses the msg.sender\n    this.options.recipient = this.options.recipient ?? SENDER_AS_RECIPIENT\n\n    // flag for whether we want to perform slippage check on aggregate output of multiple routes\n    //   1. when there are >2 exact input trades. this is only a heuristic,\n    //      as it's still more gas-expensive even in this case, but has benefits\n    //      in that the reversion probability is lower\n    const performAggregatedSlippageCheck =\n      this.trade.tradeType === TradeType.EXACT_INPUT && this.trade.routes.length > 2\n    const outputIsNative = this.trade.outputAmount.currency.isNative\n    const inputIsNative = this.trade.inputAmount.currency.isNative\n    const routerMustCustody = performAggregatedSlippageCheck || outputIsNative || hasFeeOption(this.options)\n\n    for (const swap of this.trade.swaps) {\n      switch (swap.route.protocol) {\n        case Protocol.V2:\n          addV2Swap(planner, swap, this.trade.tradeType, this.options, payerIsUser, routerMustCustody)\n          break\n        case Protocol.V3:\n          addV3Swap(planner, swap, this.trade.tradeType, this.options, payerIsUser, routerMustCustody)\n          break\n        case Protocol.MIXED:\n          addMixedSwap(planner, swap, this.trade.tradeType, this.options, payerIsUser, routerMustCustody)\n          break\n        default:\n          throw new Error('UNSUPPORTED_TRADE_PROTOCOL')\n      }\n    }\n\n    let minimumAmountOut: BigNumber = BigNumber.from(\n      this.trade.minimumAmountOut(this.options.slippageTolerance).quotient.toString()\n    )\n\n    // The router custodies for 3 reasons: to unwrap, to take a fee, and/or to do a slippage check\n    if (routerMustCustody) {\n      // If there is a fee, that percentage is sent to the fee recipient\n      // In the case where ETH is the output currency, the fee is taken in WETH (for gas reasons)\n      if (!!this.options.fee) {\n        const feeBips = encodeFeeBips(this.options.fee.fee)\n        planner.addCommand(CommandType.PAY_PORTION, [\n          this.trade.outputAmount.currency.wrapped.address,\n          this.options.fee.recipient,\n          feeBips,\n        ])\n\n        // If the trade is exact output, and a fee was taken, we must adjust the amount out to be the amount after the fee\n        // Otherwise we continue as expected with the trade's normal expected output\n        if (this.trade.tradeType === TradeType.EXACT_OUTPUT) {\n          minimumAmountOut = minimumAmountOut.sub(minimumAmountOut.mul(feeBips).div(10000))\n        }\n      }\n\n      // If there is a flat fee, that absolute amount is sent to the fee recipient\n      // In the case where ETH is the output currency, the fee is taken in WETH (for gas reasons)\n      if (!!this.options.flatFee) {\n        const feeAmount = this.options.flatFee.amount\n        if (minimumAmountOut.lt(feeAmount)) throw new Error('Flat fee amount greater than minimumAmountOut')\n\n        planner.addCommand(CommandType.TRANSFER, [\n          this.trade.outputAmount.currency.wrapped.address,\n          this.options.flatFee.recipient,\n          feeAmount,\n        ])\n\n        // If the trade is exact output, and a fee was taken, we must adjust the amount out to be the amount after the fee\n        // Otherwise we continue as expected with the trade's normal expected output\n        if (this.trade.tradeType === TradeType.EXACT_OUTPUT) {\n          minimumAmountOut = minimumAmountOut.sub(feeAmount)\n        }\n      }\n\n      // The remaining tokens that need to be sent to the user after the fee is taken will be caught\n      // by this if-else clause.\n      if (outputIsNative) {\n        planner.addCommand(CommandType.UNWRAP_WETH, [this.options.recipient, minimumAmountOut])\n      } else {\n        planner.addCommand(CommandType.SWEEP, [\n          this.trade.outputAmount.currency.wrapped.address,\n          this.options.recipient,\n          minimumAmountOut,\n        ])\n      }\n    }\n\n    if (inputIsNative && (this.trade.tradeType === TradeType.EXACT_OUTPUT || riskOfPartialFill(this.trade))) {\n      // for exactOutput swaps that take native currency as input\n      // we need to send back the change to the user\n      planner.addCommand(CommandType.UNWRAP_WETH, [this.options.recipient, 0])\n    }\n  }\n}\n\n// encode a uniswap v2 swap\nfunction addV2Swap<TInput extends Currency, TOutput extends Currency>(\n  planner: RoutePlanner,\n  { route, inputAmount, outputAmount }: Swap<TInput, TOutput>,\n  tradeType: TradeType,\n  options: SwapOptions,\n  payerIsUser: boolean,\n  routerMustCustody: boolean\n): void {\n  const trade = new V2Trade(\n    route as RouteV2<TInput, TOutput>,\n    tradeType == TradeType.EXACT_INPUT ? inputAmount : outputAmount,\n    tradeType\n  )\n\n  if (tradeType == TradeType.EXACT_INPUT) {\n    planner.addCommand(CommandType.V2_SWAP_EXACT_IN, [\n      // if native, we have to unwrap so keep in the router for now\n      routerMustCustody ? ROUTER_AS_RECIPIENT : options.recipient,\n      trade.maximumAmountIn(options.slippageTolerance).quotient.toString(),\n      trade.minimumAmountOut(options.slippageTolerance).quotient.toString(),\n      route.path.map((pool) => pool.address),\n      payerIsUser,\n    ])\n  } else if (tradeType == TradeType.EXACT_OUTPUT) {\n    planner.addCommand(CommandType.V2_SWAP_EXACT_OUT, [\n      routerMustCustody ? ROUTER_AS_RECIPIENT : options.recipient,\n      trade.minimumAmountOut(options.slippageTolerance).quotient.toString(),\n      trade.maximumAmountIn(options.slippageTolerance).quotient.toString(),\n      route.path.map((pool) => pool.address),\n      payerIsUser,\n    ])\n  }\n}\n\n// encode a uniswap v3 swap\nfunction addV3Swap<TInput extends Currency, TOutput extends Currency>(\n  planner: RoutePlanner,\n  { route, inputAmount, outputAmount }: Swap<TInput, TOutput>,\n  tradeType: TradeType,\n  options: SwapOptions,\n  payerIsUser: boolean,\n  routerMustCustody: boolean\n): void {\n  const trade = V3Trade.createUncheckedTrade({\n    route: route as RouteV3<TInput, TOutput>,\n    inputAmount,\n    outputAmount,\n    tradeType,\n  })\n\n  const path = encodeRouteToPath(route as RouteV3<TInput, TOutput>, trade.tradeType === TradeType.EXACT_OUTPUT)\n  if (tradeType == TradeType.EXACT_INPUT) {\n    planner.addCommand(CommandType.V3_SWAP_EXACT_IN, [\n      routerMustCustody ? ROUTER_AS_RECIPIENT : options.recipient,\n      trade.maximumAmountIn(options.slippageTolerance).quotient.toString(),\n      trade.minimumAmountOut(options.slippageTolerance).quotient.toString(),\n      path,\n      payerIsUser,\n    ])\n  } else if (tradeType == TradeType.EXACT_OUTPUT) {\n    planner.addCommand(CommandType.V3_SWAP_EXACT_OUT, [\n      routerMustCustody ? ROUTER_AS_RECIPIENT : options.recipient,\n      trade.minimumAmountOut(options.slippageTolerance).quotient.toString(),\n      trade.maximumAmountIn(options.slippageTolerance).quotient.toString(),\n      path,\n      payerIsUser,\n    ])\n  }\n}\n\n// encode a mixed route swap, i.e. including both v2 and v3 pools\nfunction addMixedSwap<TInput extends Currency, TOutput extends Currency>(\n  planner: RoutePlanner,\n  swap: Swap<TInput, TOutput>,\n  tradeType: TradeType,\n  options: SwapOptions,\n  payerIsUser: boolean,\n  routerMustCustody: boolean\n): void {\n  const { route, inputAmount, outputAmount } = swap\n  const tradeRecipient = routerMustCustody ? ROUTER_AS_RECIPIENT : options.recipient\n\n  // single hop, so it can be reduced to plain v2 or v3 swap logic\n  if (route.pools.length === 1) {\n    if (route.pools[0] instanceof Pool) {\n      return addV3Swap(planner, swap, tradeType, options, payerIsUser, routerMustCustody)\n    } else if (route.pools[0] instanceof Pair) {\n      return addV2Swap(planner, swap, tradeType, options, payerIsUser, routerMustCustody)\n    } else {\n      throw new Error('Invalid route type')\n    }\n  }\n\n  const trade = MixedRouteTrade.createUncheckedTrade({\n    route: route as MixedRoute<TInput, TOutput>,\n    inputAmount,\n    outputAmount,\n    tradeType,\n  })\n\n  const amountIn = trade.maximumAmountIn(options.slippageTolerance, inputAmount).quotient.toString()\n  const amountOut = trade.minimumAmountOut(options.slippageTolerance, outputAmount).quotient.toString()\n\n  // logic from\n  // https://github.com/Uniswap/router-sdk/blob/d8eed164e6c79519983844ca8b6a3fc24ebcb8f8/src/swapRouter.ts#L276\n  const sections = partitionMixedRouteByProtocol(route as MixedRoute<TInput, TOutput>)\n  const isLastSectionInRoute = (i: number) => {\n    return i === sections.length - 1\n  }\n\n  let outputToken\n  let inputToken = route.input.wrapped\n\n  for (let i = 0; i < sections.length; i++) {\n    const section = sections[i]\n    /// Now, we get output of this section\n    outputToken = getOutputOfPools(section, inputToken)\n\n    const newRouteOriginal = new MixedRouteSDK(\n      [...section],\n      section[0].token0.equals(inputToken) ? section[0].token0 : section[0].token1,\n      outputToken\n    )\n    const newRoute = new MixedRoute(newRouteOriginal)\n\n    /// Previous output is now input\n    inputToken = outputToken\n\n    const mixedRouteIsAllV3 = (route: MixedRouteSDK<Currency, Currency>) => {\n      return route.pools.every((pool) => pool instanceof Pool)\n    }\n\n    if (mixedRouteIsAllV3(newRoute)) {\n      const path: string = encodeMixedRouteToPath(newRoute)\n\n      planner.addCommand(CommandType.V3_SWAP_EXACT_IN, [\n        // if not last section: send tokens directly to the first v2 pair of the next section\n        // note: because of the partitioning function we can be sure that the next section is v2\n        isLastSectionInRoute(i) ? tradeRecipient : (sections[i + 1][0] as Pair).liquidityToken.address,\n        i == 0 ? amountIn : CONTRACT_BALANCE, // amountIn\n        !isLastSectionInRoute(i) ? 0 : amountOut, // amountOut\n        path, // path\n        payerIsUser && i === 0, // payerIsUser\n      ])\n    } else {\n      planner.addCommand(CommandType.V2_SWAP_EXACT_IN, [\n        isLastSectionInRoute(i) ? tradeRecipient : ROUTER_AS_RECIPIENT, // recipient\n        i === 0 ? amountIn : CONTRACT_BALANCE, // amountIn\n        !isLastSectionInRoute(i) ? 0 : amountOut, // amountOutMin\n        newRoute.path.map((pool) => pool.address), // path\n        payerIsUser && i === 0,\n      ])\n    }\n  }\n}\n\n// if price impact is very high, there's a chance of hitting max/min prices resulting in a partial fill of the swap\nfunction riskOfPartialFill(trade: RouterTrade<Currency, Currency, TradeType>): boolean {\n  return trade.priceImpact.greaterThan(REFUND_ETH_PRICE_IMPACT_THRESHOLD)\n}\n\nfunction hasFeeOption(swapOptions: SwapOptions): boolean {\n  return !!swapOptions.fee || !!swapOptions.flatFee\n}\n","import { BigNumber } from 'ethers'\nimport JSBI from 'jsbi'\nimport bn from 'bignumber.js'\nimport { Percent } from '@uniswap/sdk-core'\nimport { toHex } from '@uniswap/v3-sdk'\n\nexport function expandTo18DecimalsBN(n: number): BigNumber {\n  // use bn intermediately to allow decimals in intermediate calculations\n  return BigNumber.from(new bn(n).times(new bn(10).pow(18)).toFixed())\n}\n\nexport function expandTo18Decimals(n: number): JSBI {\n  return JSBI.BigInt(BigNumber.from(n).mul(BigNumber.from(10).pow(18)).toString())\n}\n\nexport function encodeFeeBips(fee: Percent): string {\n  return toHex(fee.multiply(10_000).quotient)\n}\n","import invariant from 'tiny-invariant'\nimport { ethers } from 'ethers'\nimport { PermitSingle } from '@uniswap/permit2-sdk'\nimport { CommandType, RoutePlanner } from './routerCommands'\nimport { OPENSEA_CONDUIT_SPENDER_ID, ROUTER_AS_RECIPIENT, SUDOSWAP_SPENDER_ID } from './constants'\n\nexport interface Permit2Permit extends PermitSingle {\n  signature: string\n}\n\nexport type ApproveProtocol = {\n  token: string\n  protocol: string\n}\n\nexport type Permit2TransferFrom = {\n  token: string\n  amount: string\n  recipient?: string\n}\n\nexport type InputTokenOptions = {\n  approval?: ApproveProtocol\n  permit2Permit?: Permit2Permit\n  permit2TransferFrom?: Permit2TransferFrom\n}\n\nconst SIGNATURE_LENGTH = 65\nconst EIP_2098_SIGNATURE_LENGTH = 64\n\nexport function encodePermit(planner: RoutePlanner, permit2: Permit2Permit): void {\n  let signature = permit2.signature\n\n  const length = ethers.utils.arrayify(permit2.signature).length\n  // signature data provided for EIP-1271 may have length different from ECDSA signature\n  if (length === SIGNATURE_LENGTH || length === EIP_2098_SIGNATURE_LENGTH) {\n    // sanitizes signature to cover edge cases of malformed EIP-2098 sigs and v used as recovery id\n    signature = ethers.utils.joinSignature(ethers.utils.splitSignature(permit2.signature))\n  }\n\n  planner.addCommand(CommandType.PERMIT2_PERMIT, [permit2, signature])\n}\n\n// Handles the encoding of commands needed to gather input tokens for a trade\n// Approval: The router approving another address to take tokens.\n//   note: Only seaport and sudoswap support this action. Approvals are left open.\n// Permit: A Permit2 signature-based Permit to allow the router to access a user's tokens\n// Transfer: A Permit2 TransferFrom of tokens from a user to either the router or another address\nexport function encodeInputTokenOptions(planner: RoutePlanner, options: InputTokenOptions) {\n  // first ensure that all tokens provided for encoding are the same\n  if (!!options.approval && !!options.permit2Permit)\n    invariant(options.approval.token === options.permit2Permit.details.token, `inconsistent token`)\n  if (!!options.approval && !!options.permit2TransferFrom)\n    invariant(options.approval.token === options.permit2TransferFrom.token, `inconsistent token`)\n  if (!!options.permit2TransferFrom && !!options.permit2Permit)\n    invariant(options.permit2TransferFrom.token === options.permit2Permit.details.token, `inconsistent token`)\n\n  // if an options.approval is required, add it\n  if (!!options.approval) {\n    planner.addCommand(CommandType.APPROVE_ERC20, [\n      options.approval.token,\n      mapApprovalProtocol(options.approval.protocol),\n    ])\n  }\n\n  // if this order has a options.permit2Permit, encode it\n  if (!!options.permit2Permit) {\n    encodePermit(planner, options.permit2Permit)\n  }\n\n  if (!!options.permit2TransferFrom) {\n    planner.addCommand(CommandType.PERMIT2_TRANSFER_FROM, [\n      options.permit2TransferFrom.token,\n      options.permit2TransferFrom.recipient ? options.permit2TransferFrom.recipient : ROUTER_AS_RECIPIENT,\n      options.permit2TransferFrom.amount,\n    ])\n  }\n}\n\nfunction mapApprovalProtocol(protocolAddress: string): number {\n  switch (protocolAddress.toLowerCase()) {\n    case '0x00000000000000adc04c56bf30ac9d3c0aaf14dc': // Seaport v1.5\n      return OPENSEA_CONDUIT_SPENDER_ID\n    case '0x00000000000001ad428e4906ae43d8f9852d0dd6': // Seaport v1.4\n      return OPENSEA_CONDUIT_SPENDER_ID\n    case '0x2b2e8cda09bba9660dca5cb6233787738ad68329': // Sudoswap\n      return SUDOSWAP_SPENDER_ID\n    default:\n      throw new Error('unsupported protocol address')\n  }\n}\n","import invariant from 'tiny-invariant'\nimport { abi } from '@uniswap/universal-router/artifacts/contracts/UniversalRouter.sol/UniversalRouter.json'\nimport { Interface } from '@ethersproject/abi'\nimport { BigNumber, BigNumberish } from 'ethers'\nimport { MethodParameters } from '@uniswap/v3-sdk'\nimport { Trade as RouterTrade } from '@uniswap/router-sdk'\nimport { Currency, TradeType } from '@uniswap/sdk-core'\nimport { Command, RouterTradeType } from './entities/Command'\nimport { Market, NFTTrade, SupportedProtocolsData } from './entities/NFTTrade'\nimport { UniswapTrade, SwapOptions } from './entities/protocols/uniswap'\nimport { UnwrapWETH } from './entities/protocols/unwrapWETH'\nimport { CommandType, RoutePlanner } from './utils/routerCommands'\nimport { encodePermit } from './utils/inputTokens'\nimport { ROUTER_AS_RECIPIENT, SENDER_AS_RECIPIENT, ETH_ADDRESS } from './utils/constants'\nimport { SeaportTrade } from './entities'\n\nexport type SwapRouterConfig = {\n  sender?: string // address\n  deadline?: BigNumberish\n}\n\ntype SupportedNFTTrade = NFTTrade<SupportedProtocolsData>\n\nexport abstract class SwapRouter {\n  public static INTERFACE: Interface = new Interface(abi)\n\n  public static swapCallParameters(trades: Command[] | Command, config: SwapRouterConfig = {}): MethodParameters {\n    if (!Array.isArray(trades)) trades = [trades]\n\n    const nftTrades = trades.filter((trade, _, []) => trade.hasOwnProperty('market')) as SupportedNFTTrade[]\n    const allowRevert = nftTrades.length == 1 && nftTrades[0].orders.length == 1 ? false : true\n    const planner = new RoutePlanner()\n\n    // track value flow to require the right amount of native value\n    let currentNativeValueInRouter = BigNumber.from(0)\n    let transactionValue = BigNumber.from(0)\n\n    // tracks the input tokens (and ETH) used to buy NFTs to allow us to sweep\n    let nftInputTokens = new Set<string>()\n\n    for (const trade of trades) {\n      /**\n       * is NFTTrade\n       */\n      if (trade.tradeType == RouterTradeType.NFTTrade) {\n        const nftTrade = trade as SupportedNFTTrade\n        nftTrade.encode(planner, { allowRevert })\n        const tradePrice = nftTrade.getTotalPrice()\n\n        if (nftTrade.market == Market.Seaport) {\n          const seaportTrade = nftTrade as SeaportTrade\n          const seaportInputTokens = seaportTrade.getInputTokens()\n          seaportInputTokens.forEach((inputToken) => {\n            nftInputTokens.add(inputToken)\n          })\n        } else {\n          nftInputTokens.add(ETH_ADDRESS)\n        }\n\n        // send enough native value to contract for NFT purchase\n        if (currentNativeValueInRouter.lt(tradePrice)) {\n          transactionValue = transactionValue.add(tradePrice.sub(currentNativeValueInRouter))\n          currentNativeValueInRouter = BigNumber.from(0)\n        } else {\n          currentNativeValueInRouter = currentNativeValueInRouter.sub(tradePrice)\n        }\n        /**\n         * is UniswapTrade\n         */\n      } else if (trade.tradeType == RouterTradeType.UniswapTrade) {\n        const uniswapTrade = trade as UniswapTrade\n        const inputIsNative = uniswapTrade.trade.inputAmount.currency.isNative\n        const outputIsNative = uniswapTrade.trade.outputAmount.currency.isNative\n        const swapOptions = uniswapTrade.options\n\n        invariant(!(inputIsNative && !!swapOptions.inputTokenPermit), 'NATIVE_INPUT_PERMIT')\n\n        if (!!swapOptions.inputTokenPermit) {\n          encodePermit(planner, swapOptions.inputTokenPermit)\n        }\n\n        if (inputIsNative) {\n          transactionValue = transactionValue.add(\n            BigNumber.from(uniswapTrade.trade.maximumAmountIn(swapOptions.slippageTolerance).quotient.toString())\n          )\n        }\n        // track amount of native currency in the router\n        if (outputIsNative && swapOptions.recipient == ROUTER_AS_RECIPIENT) {\n          currentNativeValueInRouter = currentNativeValueInRouter.add(\n            BigNumber.from(uniswapTrade.trade.minimumAmountOut(swapOptions.slippageTolerance).quotient.toString())\n          )\n        }\n        uniswapTrade.encode(planner, { allowRevert: false })\n        /**\n         * is UnwrapWETH\n         */\n      } else if (trade.tradeType == RouterTradeType.UnwrapWETH) {\n        const UnwrapWETH = trade as UnwrapWETH\n        trade.encode(planner, { allowRevert: false })\n        currentNativeValueInRouter = currentNativeValueInRouter.add(UnwrapWETH.amount)\n        /**\n         * is (Un)WrapSTETH\n         */\n      } else if (trade.tradeType == RouterTradeType.WrapSTETH || trade.tradeType == RouterTradeType.UnwrapSTETH) {\n        trade.encode(planner, { allowRevert: false })\n        /**\n         * else\n         */\n      } else {\n        throw 'trade must be of instance: UniswapTrade, NFTTrade, UnwrapWETH, WrapSTETH'\n      }\n    }\n\n    // TODO: matches current logic for now, but should eventually only sweep for multiple NFT trades\n    // or NFT trades with potential slippage (i.e. sudo).\n    // Note: NFTXV2 sends excess ETH to the caller (router), not the specified recipient\n    nftInputTokens.forEach((inputToken) => {\n      planner.addCommand(CommandType.SWEEP, [inputToken, SENDER_AS_RECIPIENT, 0])\n    })\n    return SwapRouter.encodePlan(planner, transactionValue, config)\n  }\n\n  /**\n   * @deprecated in favor of swapCallParameters. Update before next major version 2.0.0\n   * This version does not work correctly for Seaport ERC20->NFT purchases\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given swap.\n   * @param trades to produce call parameters for\n   */\n  public static swapNFTCallParameters(trades: SupportedNFTTrade[], config: SwapRouterConfig = {}): MethodParameters {\n    let planner = new RoutePlanner()\n    let totalPrice = BigNumber.from(0)\n\n    const allowRevert = trades.length == 1 && trades[0].orders.length == 1 ? false : true\n\n    for (const trade of trades) {\n      trade.encode(planner, { allowRevert })\n      totalPrice = totalPrice.add(trade.getTotalPrice())\n    }\n\n    planner.addCommand(CommandType.SWEEP, [ETH_ADDRESS, SENDER_AS_RECIPIENT, 0])\n    return SwapRouter.encodePlan(planner, totalPrice, config)\n  }\n\n  /**\n   * @deprecated in favor of swapCallParameters. Update before next major version 2.0.0\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.\n   * @param trades to produce call parameters for\n   * @param options options for the call parameters\n   */\n  public static swapERC20CallParameters(\n    trades: RouterTrade<Currency, Currency, TradeType>,\n    options: SwapOptions\n  ): MethodParameters {\n    // TODO: use permit if signature included in swapOptions\n    const planner = new RoutePlanner()\n\n    const trade: UniswapTrade = new UniswapTrade(trades, options)\n\n    const inputCurrency = trade.trade.inputAmount.currency\n    invariant(!(inputCurrency.isNative && !!options.inputTokenPermit), 'NATIVE_INPUT_PERMIT')\n\n    if (options.inputTokenPermit) {\n      encodePermit(planner, options.inputTokenPermit)\n    }\n\n    const nativeCurrencyValue = inputCurrency.isNative\n      ? BigNumber.from(trade.trade.maximumAmountIn(options.slippageTolerance).quotient.toString())\n      : BigNumber.from(0)\n\n    trade.encode(planner, { allowRevert: false })\n    return SwapRouter.encodePlan(planner, nativeCurrencyValue, {\n      deadline: options.deadlineOrPreviousBlockhash ? BigNumber.from(options.deadlineOrPreviousBlockhash) : undefined,\n    })\n  }\n\n  /**\n   * Encodes a planned route into a method name and parameters for the Router contract.\n   * @param planner the planned route\n   * @param nativeCurrencyValue the native currency value of the planned route\n   * @param config the router config\n   */\n  private static encodePlan(\n    planner: RoutePlanner,\n    nativeCurrencyValue: BigNumber,\n    config: SwapRouterConfig = {}\n  ): MethodParameters {\n    const { commands, inputs } = planner\n    const functionSignature = !!config.deadline ? 'execute(bytes,bytes[],uint256)' : 'execute(bytes,bytes[])'\n    const parameters = !!config.deadline ? [commands, inputs, config.deadline] : [commands, inputs]\n    const calldata = SwapRouter.INTERFACE.encodeFunctionData(functionSignature, parameters)\n    return { calldata, value: nativeCurrencyValue.toHexString() }\n  }\n}\n","import { TradeConfig } from '../Command'\nimport { NFTTrade, Market, TokenType, BuyItem } from '../NFTTrade'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { BigNumber, BigNumberish } from 'ethers'\n\nexport type CryptopunkData = {\n  tokenId: BigNumberish\n  recipient: string\n  value: BigNumberish\n}\n\nexport class CryptopunkTrade extends NFTTrade<CryptopunkData> {\n  public static CRYPTOPUNK_ADDRESS: string = '0xb47e3cd837ddf8e4c57f05d70ab865de6e193bbb'\n\n  constructor(orders: CryptopunkData[]) {\n    super(Market.Cryptopunks, orders)\n  }\n\n  encode(planner: RoutePlanner, config: TradeConfig): void {\n    for (const item of this.orders) {\n      planner.addCommand(CommandType.CRYPTOPUNKS, [item.tokenId, item.recipient, item.value], config.allowRevert)\n    }\n  }\n\n  getBuyItems(): BuyItem[] {\n    let buyItems: BuyItem[] = []\n    for (const item of this.orders) {\n      buyItems.push({\n        tokenAddress: CryptopunkTrade.CRYPTOPUNK_ADDRESS,\n        tokenId: item.tokenId,\n        tokenType: TokenType.Cryptopunk,\n      })\n    }\n    return buyItems\n  }\n\n  getTotalPrice(): BigNumber {\n    let total = BigNumber.from(0)\n    for (const item of this.orders) {\n      total = total.add(item.value)\n    }\n    return total\n  }\n}\n","import abi from '../../../abis/Foundation.json'\nimport { Interface } from '@ethersproject/abi'\nimport { BuyItem, Market, NFTTrade, TokenType } from '../NFTTrade'\nimport { TradeConfig } from '../Command'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { BigNumber, BigNumberish } from 'ethers'\n\nexport type FoundationData = {\n  recipient: string\n  tokenAddress: string\n  tokenId: BigNumberish\n  price: BigNumberish\n  referrer: string // address\n}\n\nexport class FoundationTrade extends NFTTrade<FoundationData> {\n  public static INTERFACE: Interface = new Interface(abi)\n\n  constructor(orders: FoundationData[]) {\n    super(Market.Foundation, orders)\n  }\n\n  encode(planner: RoutePlanner, config: TradeConfig): void {\n    for (const item of this.orders) {\n      const calldata = FoundationTrade.INTERFACE.encodeFunctionData('buyV2', [\n        item.tokenAddress,\n        item.tokenId,\n        item.price,\n        item.referrer,\n      ])\n      planner.addCommand(\n        CommandType.FOUNDATION,\n        [item.price, calldata, item.recipient, item.tokenAddress, item.tokenId],\n        config.allowRevert\n      )\n    }\n  }\n\n  getBuyItems(): BuyItem[] {\n    let buyItems: BuyItem[] = []\n    for (const item of this.orders) {\n      buyItems.push({\n        tokenAddress: item.tokenAddress,\n        tokenId: item.tokenId,\n        tokenType: TokenType.ERC721,\n      })\n    }\n    return buyItems\n  }\n\n  getTotalPrice(): BigNumber {\n    let total = BigNumber.from(0)\n    for (const item of this.orders) {\n      total = total.add(item.price)\n    }\n    return total\n  }\n}\n","import abi from '../../../abis/LooksRareV2.json'\nimport { Interface } from '@ethersproject/abi'\nimport { BuyItem, Market, NFTTrade, TokenType } from '../NFTTrade'\nimport { TradeConfig } from '../Command'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { BigNumber } from 'ethers'\nimport { ZERO_ADDRESS } from '../../utils/constants'\n\nexport type MakerOrder = {\n  quoteType: number\n  globalNonce: string\n  subsetNonce: string\n  orderNonce: string\n  strategyId: number\n  collectionType: number\n  collection: string\n  currency: string\n  signer: string\n  startTime: number\n  endTime: number\n  price: string\n  itemIds: string[]\n  amounts: string[]\n  additionalParameters: string\n}\n\nexport type TakerOrder = {\n  recipient: string\n  additionalParameters: string\n}\n\nexport type MerkleProof = {\n  value: string\n  position: number\n}\n\nexport type MerkleTree = {\n  root: string\n  proof: MerkleProof[]\n}\n\nexport type LRV2APIOrder = MakerOrder & {\n  id: string\n  hash: string\n  signature: string\n  createdAt: string\n  merkleRoot?: string\n  merkleProof?: MerkleProof[]\n  status: string\n}\n\nexport type LooksRareV2Data = {\n  apiOrder: LRV2APIOrder\n  taker: string\n}\n\nexport class LooksRareV2Trade extends NFTTrade<LooksRareV2Data> {\n  public static INTERFACE: Interface = new Interface(abi)\n  private static ERC721_ORDER = 0\n\n  constructor(orders: LooksRareV2Data[]) {\n    super(Market.LooksRareV2, orders)\n  }\n\n  encode(planner: RoutePlanner, config: TradeConfig): void {\n    const { takerBids, makerOrders, makerSignatures, totalValue, merkleTrees } = this.refactorAPIData(this.orders)\n\n    let calldata\n    if (this.orders.length == 1) {\n      calldata = LooksRareV2Trade.INTERFACE.encodeFunctionData('executeTakerBid', [\n        takerBids[0],\n        makerOrders[0],\n        makerSignatures[0],\n        merkleTrees[0],\n        ZERO_ADDRESS, // affiliate\n      ])\n    } else {\n      calldata = LooksRareV2Trade.INTERFACE.encodeFunctionData('executeMultipleTakerBids', [\n        takerBids,\n        makerOrders,\n        makerSignatures,\n        merkleTrees,\n        ZERO_ADDRESS, // affiliate\n        false, // isAtomic (we deal with this in allowRevert)\n      ])\n    }\n\n    planner.addCommand(CommandType.LOOKS_RARE_V2, [totalValue, calldata], config.allowRevert)\n  }\n\n  getBuyItems(): BuyItem[] {\n    let buyItems: BuyItem[] = []\n    for (const item of this.orders) {\n      const tokenAddress = item.apiOrder.collection\n      const tokenType =\n        item.apiOrder.collectionType == LooksRareV2Trade.ERC721_ORDER ? TokenType.ERC721 : TokenType.ERC1155\n      for (const tokenId of item.apiOrder.itemIds)\n        buyItems.push({\n          tokenAddress,\n          tokenId,\n          tokenType,\n        })\n    }\n    return buyItems\n  }\n\n  getTotalPrice(): BigNumber {\n    let total = BigNumber.from(0)\n    for (const item of this.orders) {\n      total = total.add(item.apiOrder.price)\n    }\n    return total\n  }\n\n  private refactorAPIData(orders: LooksRareV2Data[]): {\n    takerBids: TakerOrder[]\n    makerOrders: MakerOrder[]\n    makerSignatures: string[]\n    totalValue: BigNumber\n    merkleTrees: MerkleTree[]\n  } {\n    let takerBids: TakerOrder[] = []\n    let makerOrders: MakerOrder[] = []\n    let makerSignatures: string[] = []\n    let totalValue: BigNumber = BigNumber.from(0)\n    let merkleTrees: MerkleTree[] = []\n\n    orders.forEach((order) => {\n      makerOrders.push({ ...order.apiOrder })\n\n      makerSignatures.push(order.apiOrder.signature)\n\n      takerBids.push({\n        recipient: order.taker,\n        additionalParameters: '0x',\n      })\n\n      totalValue = totalValue.add(BigNumber.from(order.apiOrder.price))\n\n      merkleTrees.push({\n        root: order.apiOrder.merkleRoot ?? '0x0000000000000000000000000000000000000000000000000000000000000000',\n        proof: order.apiOrder.merkleProof ?? [],\n      })\n    })\n\n    return { takerBids, makerOrders, makerSignatures, totalValue, merkleTrees }\n  }\n}\n","import abi from '../../../abis/NFT20.json'\nimport { Interface } from '@ethersproject/abi'\nimport { TradeConfig } from '../Command'\nimport { NFTTrade, Market, TokenType, BuyItem } from '../NFTTrade'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { BigNumber, BigNumberish } from 'ethers'\n\nexport type NFT20Data = {\n  tokenAddress: string\n  tokenIds: BigNumberish[]\n  tokenAmounts: BigNumberish[]\n  recipient: string\n  fee: BigNumberish\n  isV3: boolean\n  value: BigNumberish\n}\n\nexport class NFT20Trade extends NFTTrade<NFT20Data> {\n  public static INTERFACE: Interface = new Interface(abi)\n\n  constructor(orders: NFT20Data[]) {\n    super(Market.NFT20, orders)\n  }\n\n  encode(planner: RoutePlanner, config: TradeConfig): void {\n    for (const order of this.orders) {\n      const calldata = NFT20Trade.INTERFACE.encodeFunctionData('ethForNft', [\n        order.tokenAddress,\n        order.tokenIds,\n        order.tokenAmounts,\n        order.recipient,\n        order.fee,\n        order.isV3,\n      ])\n      planner.addCommand(CommandType.NFT20, [order.value, calldata], config.allowRevert)\n    }\n  }\n\n  getBuyItems(): BuyItem[] {\n    let buyItems: BuyItem[] = []\n    for (const pool of this.orders) {\n      for (const tokenId of pool.tokenIds) {\n        buyItems.push({\n          tokenAddress: pool.tokenAddress,\n          tokenId: tokenId,\n          tokenType: TokenType.ERC721,\n        })\n      }\n    }\n\n    return buyItems\n  }\n\n  getTotalPrice(): BigNumber {\n    let total = BigNumber.from(0)\n    for (const item of this.orders) {\n      total = total.add(item.value)\n    }\n    return total\n  }\n}\n","import abi from '../../../abis/NFTXZap.json'\nimport { Interface } from '@ethersproject/abi'\nimport { BuyItem, Market, NFTTrade, TokenType } from '../NFTTrade'\nimport { TradeConfig } from '../Command'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { BigNumber, BigNumberish } from 'ethers'\n\nexport type NFTXData = {\n  recipient: string\n  vaultId: BigNumberish\n  tokenAddress: string\n  tokenIds: BigNumberish[]\n  value: BigNumber\n  swapCalldata: string\n}\n\nexport class NFTXTrade extends NFTTrade<NFTXData> {\n  public static INTERFACE: Interface = new Interface(abi)\n\n  constructor(orders: NFTXData[]) {\n    super(Market.NFTX, orders)\n  }\n\n  encode(planner: RoutePlanner, config: TradeConfig): void {\n    for (const order of this.orders) {\n      const calldata = NFTXTrade.INTERFACE.encodeFunctionData('buyAndRedeem', [\n        order.vaultId,\n        order.tokenIds.length,\n        order.tokenIds,\n        order.swapCalldata,\n        order.recipient,\n      ])\n\n      planner.addCommand(CommandType.NFTX, [order.value, calldata], config.allowRevert)\n    }\n  }\n\n  getBuyItems(): BuyItem[] {\n    let buyItems: BuyItem[] = []\n    for (const order of this.orders) {\n      for (const tokenId of order.tokenIds) {\n        buyItems.push({\n          tokenAddress: order.tokenAddress,\n          tokenId: tokenId,\n          tokenType: TokenType.ERC721,\n        })\n      }\n    }\n    return buyItems\n  }\n\n  getTotalPrice(): BigNumber {\n    let total = BigNumber.from(0)\n    for (const item of this.orders) {\n      total = total.add(item.value)\n    }\n    return total\n  }\n}\n","import { BigNumber, BigNumberish } from 'ethers'\nimport { Interface } from '@ethersproject/abi'\nimport abi from '../../../abis/Seaport.json'\nimport { BuyItem, Market, NFTTrade, TokenType } from '../NFTTrade'\nimport { TradeConfig } from '../Command'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { encodeInputTokenOptions, Permit2Permit } from '../../utils/inputTokens'\nimport { ETH_ADDRESS } from '../../utils/constants'\n\nexport type SeaportData = {\n  items: Order[]\n  recipient: string // address\n  protocolAddress: string\n  inputTokenProcessing?: InputTokenProcessing[]\n}\n\nexport type InputTokenProcessing = {\n  token: string\n  permit2Permit?: Permit2Permit\n  protocolApproval: boolean\n  permit2TransferFrom: boolean\n}\n\nexport type FulfillmentComponent = {\n  orderIndex: BigNumberish\n  itemIndex: BigNumberish\n}\n\nexport type OfferItem = {\n  itemType: BigNumberish // enum\n  token: string // address\n  identifierOrCriteria: BigNumberish\n  startAmount: BigNumberish\n  endAmount: BigNumberish\n}\n\nexport type ConsiderationItem = OfferItem & {\n  recipient: string\n}\n\nexport type Order = {\n  parameters: OrderParameters\n  signature: string\n}\n\ntype OrderParameters = {\n  offerer: string // address,\n  offer: OfferItem[]\n  consideration: ConsiderationItem[]\n  orderType: BigNumberish // enum\n  startTime: BigNumberish\n  endTime: BigNumberish\n  zoneHash: string // bytes32\n  zone: string // address\n  salt: BigNumberish\n  conduitKey: string // bytes32,\n  totalOriginalConsiderationItems: BigNumberish\n}\n\nexport type AdvancedOrder = Order & {\n  numerator: BigNumber // uint120\n  denominator: BigNumber // uint120\n  extraData: string // bytes\n}\n\nexport class SeaportTrade extends NFTTrade<SeaportData> {\n  public static INTERFACE: Interface = new Interface(abi)\n  public static OPENSEA_CONDUIT_KEY: string = '0x0000007b02230091a7ed01230072f7006a004d60a8d4e71d599b8104250f0000'\n\n  constructor(orders: SeaportData[]) {\n    super(Market.Seaport, orders)\n  }\n\n  encode(planner: RoutePlanner, config: TradeConfig): void {\n    for (const order of this.orders) {\n      let advancedOrders: AdvancedOrder[] = []\n      let orderFulfillments: FulfillmentComponent[][] = order.items.map((_, index) => [\n        { orderIndex: index, itemIndex: 0 },\n      ])\n      let considerationFulFillments: FulfillmentComponent[][] = this.getConsiderationFulfillments(order.items)\n\n      for (const item of order.items) {\n        const { advancedOrder } = this.getAdvancedOrderParams(item)\n        advancedOrders.push(advancedOrder)\n      }\n\n      let calldata: string\n      if (advancedOrders.length == 1) {\n        calldata = SeaportTrade.INTERFACE.encodeFunctionData('fulfillAdvancedOrder', [\n          advancedOrders[0],\n          [],\n          SeaportTrade.OPENSEA_CONDUIT_KEY,\n          order.recipient,\n        ])\n      } else {\n        calldata = SeaportTrade.INTERFACE.encodeFunctionData('fulfillAvailableAdvancedOrders', [\n          advancedOrders,\n          [],\n          orderFulfillments,\n          considerationFulFillments,\n          SeaportTrade.OPENSEA_CONDUIT_KEY,\n          order.recipient,\n          100, // TODO: look into making this a better number\n        ])\n      }\n\n      if (!!order.inputTokenProcessing) {\n        for (const inputToken of order.inputTokenProcessing)\n          encodeInputTokenOptions(planner, {\n            approval: inputToken.protocolApproval\n              ? { token: inputToken.token, protocol: order.protocolAddress }\n              : undefined,\n            permit2Permit: inputToken.permit2Permit,\n            permit2TransferFrom: inputToken.permit2TransferFrom\n              ? { token: inputToken.token, amount: this.getTotalOrderPrice(order, inputToken.token).toString() }\n              : undefined,\n          })\n      }\n\n      planner.addCommand(\n        this.commandMap(order.protocolAddress),\n        [this.getTotalOrderPrice(order, ETH_ADDRESS).toString(), calldata],\n        config.allowRevert\n      )\n    }\n  }\n\n  getBuyItems(): BuyItem[] {\n    let buyItems: BuyItem[] = []\n    for (const order of this.orders) {\n      for (const item of order.items) {\n        for (const offer of item.parameters.offer) {\n          buyItems.push({\n            tokenAddress: offer.token,\n            tokenId: offer.identifierOrCriteria,\n            tokenType: TokenType.ERC721,\n          })\n        }\n      }\n    }\n    return buyItems\n  }\n\n  getInputTokens(): Set<string> {\n    let inputTokens = new Set<string>()\n    for (const order of this.orders) {\n      for (const item of order.items) {\n        for (const consideration of item.parameters.consideration) {\n          const token = consideration.token.toLowerCase()\n          inputTokens.add(token)\n        }\n      }\n    }\n    return inputTokens\n  }\n\n  getTotalOrderPrice(order: SeaportData, token: string = ETH_ADDRESS): BigNumber {\n    let totalOrderPrice = BigNumber.from(0)\n    for (const item of order.items) {\n      totalOrderPrice = totalOrderPrice.add(this.calculateValue(item.parameters.consideration, token))\n    }\n    return totalOrderPrice\n  }\n\n  getTotalPrice(token: string = ETH_ADDRESS): BigNumber {\n    let totalPrice = BigNumber.from(0)\n    for (const order of this.orders) {\n      for (const item of order.items) {\n        totalPrice = totalPrice.add(this.calculateValue(item.parameters.consideration, token))\n      }\n    }\n    return totalPrice\n  }\n\n  private commandMap(protocolAddress: string): CommandType {\n    switch (protocolAddress.toLowerCase()) {\n      case '0x00000000000000adc04c56bf30ac9d3c0aaf14dc': // Seaport v1.5\n        return CommandType.SEAPORT_V1_5\n      case '0x00000000000001ad428e4906ae43d8f9852d0dd6': // Seaport v1.4\n        return CommandType.SEAPORT_V1_4\n      default:\n        throw new Error('unsupported Seaport address')\n    }\n  }\n\n  private getConsiderationFulfillments(protocolDatas: Order[]): FulfillmentComponent[][] {\n    let considerationFulfillments: FulfillmentComponent[][] = []\n    const considerationRecipients: string[] = []\n\n    for (const i in protocolDatas) {\n      const protocolData = protocolDatas[i]\n\n      for (const j in protocolData.parameters.consideration) {\n        const item = protocolData.parameters.consideration[j]\n\n        if (considerationRecipients.findIndex((x) => x === item.recipient) === -1) {\n          considerationRecipients.push(item.recipient)\n        }\n\n        const recipientIndex = considerationRecipients.findIndex((x) => x === item.recipient)\n\n        if (!considerationFulfillments[recipientIndex]) {\n          considerationFulfillments.push([\n            {\n              orderIndex: i,\n              itemIndex: j,\n            },\n          ])\n        } else {\n          considerationFulfillments[recipientIndex].push({\n            orderIndex: i,\n            itemIndex: j,\n          })\n        }\n      }\n    }\n    return considerationFulfillments\n  }\n\n  private getAdvancedOrderParams(data: Order): { advancedOrder: AdvancedOrder } {\n    const advancedOrder = {\n      parameters: data.parameters,\n      numerator: BigNumber.from('1'),\n      denominator: BigNumber.from('1'),\n      signature: data.signature,\n      extraData: '0x00',\n    }\n    return { advancedOrder }\n  }\n\n  private calculateValue(considerations: ConsiderationItem[], token: string): BigNumber {\n    return considerations.reduce(\n      (amt: BigNumber, consideration: ConsiderationItem) =>\n        consideration.token.toLowerCase() == token.toLowerCase() ? amt.add(consideration.startAmount) : amt,\n      BigNumber.from(0)\n    )\n  }\n}\n","import abi from '../../../abis/Sudoswap.json'\nimport { Interface } from '@ethersproject/abi'\nimport { BuyItem, Market, NFTTrade, TokenType } from '../NFTTrade'\nimport { TradeConfig } from '../Command'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { BigNumber, BigNumberish } from 'ethers'\n\ntype PairSwap = {\n  swapInfo: {\n    pair: string // address\n    nftIds: BigNumberish[]\n  }\n  tokenAddress: string // address\n  maxCost: BigNumberish\n}\n\nexport type SudoswapData = {\n  swaps: PairSwap[]\n  nftRecipient: string\n  ethRecipient: string\n  deadline: BigNumberish\n}\n\nexport class SudoswapTrade extends NFTTrade<SudoswapData> {\n  public static INTERFACE: Interface = new Interface(abi)\n\n  constructor(orders: SudoswapData[]) {\n    super(Market.Sudoswap, orders)\n  }\n\n  encode(planner: RoutePlanner, config: TradeConfig): void {\n    for (const order of this.orders) {\n      const calldata = SudoswapTrade.INTERFACE.encodeFunctionData('robustSwapETHForSpecificNFTs', [\n        order.swaps.map((swap) => {\n          return { swapInfo: swap.swapInfo, maxCost: swap.maxCost }\n        }),\n        order.ethRecipient,\n        order.nftRecipient,\n        order.deadline,\n      ])\n      const value = order.swaps.reduce((prevVal, swap) => {\n        return prevVal.add(swap.maxCost)\n      }, BigNumber.from(0))\n      planner.addCommand(CommandType.SUDOSWAP, [value, calldata], config.allowRevert)\n    }\n  }\n\n  getBuyItems(): BuyItem[] {\n    let buyItems: BuyItem[] = []\n    for (const order of this.orders) {\n      for (const swap of order.swaps) {\n        for (const tokenId of swap.swapInfo.nftIds) {\n          buyItems.push({\n            tokenAddress: swap.tokenAddress,\n            tokenId,\n            tokenType: TokenType.ERC721,\n          })\n        }\n      }\n    }\n    return buyItems\n  }\n\n  getTotalPrice(): BigNumber {\n    let total = BigNumber.from(0)\n    for (const order of this.orders) {\n      for (const swap of order.swaps) {\n        total = total.add(swap.maxCost)\n      }\n    }\n    return total\n  }\n}\n","import abi from '../../../abis/X2Y2.json'\nimport { Interface } from '@ethersproject/abi'\nimport { BuyItem, Market, NFTTrade, TokenType } from '../NFTTrade'\nimport { TradeConfig } from '../Command'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { BigNumber, BigNumberish } from 'ethers'\n\ntype X2Y2PartialData = {\n  signedInput: string\n  recipient: string\n  tokenAddress: string\n  tokenId: BigNumberish\n  price: BigNumberish\n}\n\nexport type X2Y2_721_Data = X2Y2PartialData & {\n  tokenType: TokenType.ERC721\n}\n\nexport type X2Y2_1155_Data = X2Y2PartialData & {\n  tokenType: TokenType.ERC1155\n  tokenAmount: BigNumberish\n}\n\nexport type X2Y2Data = X2Y2_721_Data | X2Y2_1155_Data\n\nexport class X2Y2Trade extends NFTTrade<X2Y2Data> {\n  public static INTERFACE: Interface = new Interface(abi)\n\n  constructor(orders: X2Y2Data[]) {\n    super(Market.X2Y2, orders)\n  }\n\n  encode(planner: RoutePlanner, config: TradeConfig): void {\n    for (const item of this.orders) {\n      const functionSelector = X2Y2Trade.INTERFACE.getSighash(X2Y2Trade.INTERFACE.getFunction('run'))\n      const calldata = functionSelector + item.signedInput.slice(2)\n\n      if (item.tokenType == TokenType.ERC721) {\n        planner.addCommand(\n          CommandType.X2Y2_721,\n          [item.price, calldata, item.recipient, item.tokenAddress, item.tokenId],\n          config.allowRevert\n        )\n      } else if (item.tokenType == TokenType.ERC1155) {\n        planner.addCommand(\n          CommandType.X2Y2_1155,\n          [item.price, calldata, item.recipient, item.tokenAddress, item.tokenId, item.tokenAmount],\n          config.allowRevert\n        )\n      }\n    }\n  }\n\n  getBuyItems(): BuyItem[] {\n    let buyItems: BuyItem[] = []\n    for (const item of this.orders) {\n      buyItems.push({\n        tokenAddress: item.tokenAddress,\n        tokenId: item.tokenId,\n        tokenType: item.tokenType,\n      })\n    }\n    return buyItems\n  }\n\n  getTotalPrice(): BigNumber {\n    let total = BigNumber.from(0)\n    for (const item of this.orders) {\n      total = total.add(item.price)\n    }\n    return total\n  }\n}\n","import invariant from 'tiny-invariant'\nimport { BigNumberish } from 'ethers'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { encodeInputTokenOptions, Permit2Permit } from '../../utils/inputTokens'\nimport { Command, RouterTradeType, TradeConfig } from '../Command'\nimport { ROUTER_AS_RECIPIENT, WETH_ADDRESS } from '../../utils/constants'\n\nexport class UnwrapWETH implements Command {\n  readonly tradeType: RouterTradeType = RouterTradeType.UnwrapWETH\n  readonly permit2Data: Permit2Permit\n  readonly wethAddress: string\n  readonly amount: BigNumberish\n\n  constructor(amount: BigNumberish, chainId: number, permit2?: Permit2Permit) {\n    this.wethAddress = WETH_ADDRESS(chainId)\n    this.amount = amount\n\n    if (!!permit2) {\n      invariant(\n        permit2.details.token.toLowerCase() === this.wethAddress.toLowerCase(),\n        `must be permitting WETH address: ${this.wethAddress}`\n      )\n      invariant(permit2.details.amount >= amount, `Did not permit enough WETH for unwrapWETH transaction`)\n      this.permit2Data = permit2\n    }\n  }\n\n  encode(planner: RoutePlanner, _: TradeConfig): void {\n    encodeInputTokenOptions(planner, {\n      permit2Permit: this.permit2Data,\n      permit2TransferFrom: {\n        token: this.wethAddress,\n        amount: this.amount.toString(),\n      },\n    })\n    planner.addCommand(CommandType.UNWRAP_WETH, [ROUTER_AS_RECIPIENT, this.amount])\n  }\n}\n","import invariant from 'tiny-invariant'\nimport { BigNumberish } from 'ethers'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { encodeInputTokenOptions, Permit2Permit } from '../../utils/inputTokens'\nimport { Command, RouterTradeType, TradeConfig } from '../Command'\nimport { CONTRACT_BALANCE, ROUTER_AS_RECIPIENT, STETH_ADDRESS } from '../../utils/constants'\n\nexport class WrapSTETH implements Command {\n  readonly tradeType: RouterTradeType = RouterTradeType.WrapSTETH\n  readonly permit2Data: Permit2Permit\n  readonly stethAddress: string\n  readonly amount: BigNumberish\n  readonly wrapAmount: BigNumberish\n\n  constructor(amount: BigNumberish, chainId: number, permit2?: Permit2Permit, wrapAmount?: BigNumberish) {\n    this.stethAddress = STETH_ADDRESS(chainId)\n    this.amount = amount\n    this.wrapAmount = wrapAmount ?? CONTRACT_BALANCE\n\n    if (!!permit2) {\n      invariant(\n        permit2.details.token.toLowerCase() === this.stethAddress.toLowerCase(),\n        `must be permitting STETH address: ${this.stethAddress}`\n      )\n      invariant(permit2.details.amount >= amount, `Did not permit enough STETH for unwrapSTETH transaction`)\n      this.permit2Data = permit2\n    }\n  }\n\n  encode(planner: RoutePlanner, _: TradeConfig): void {\n    encodeInputTokenOptions(planner, {\n      permit2Permit: this.permit2Data,\n      permit2TransferFrom: {\n        token: this.stethAddress,\n        amount: this.amount.toString(),\n      },\n    })\n    planner.addCommand(CommandType.WRAP_STETH, [ROUTER_AS_RECIPIENT, this.wrapAmount])\n  }\n}\n","import invariant from 'tiny-invariant'\nimport { BigNumberish } from 'ethers'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { Command, RouterTradeType, TradeConfig } from '../Command'\nimport { STETH_ADDRESS, NOT_SUPPORTED_ON_CHAIN } from '../../utils/constants'\n\nexport class UnwrapSTETH implements Command {\n  readonly tradeType: RouterTradeType = RouterTradeType.UnwrapSTETH\n  readonly recipient: string\n  readonly amountMinimum: BigNumberish\n\n  constructor(recipient: string, amountMinimum: BigNumberish, chainId: number) {\n    this.recipient = recipient\n    this.amountMinimum = amountMinimum\n    invariant(STETH_ADDRESS(chainId) != NOT_SUPPORTED_ON_CHAIN, `STETH not supported on chain ${chainId}`)\n  }\n\n  encode(planner: RoutePlanner, _: TradeConfig): void {\n    planner.addCommand(CommandType.UNWRAP_STETH, [this.recipient, this.amountMinimum])\n  }\n}\n"],"names":["RouterTradeType","Market","TokenType","CommandType","NFTTrade","market","orders","this","length","invariant","REVERTIBLE_COMMANDS","Set","SEAPORT_V1_5","SEAPORT_V1_4","NFTX","LOOKS_RARE_V2","X2Y2_721","X2Y2_1155","FOUNDATION","SUDOSWAP","NFT20","EXECUTE_SUB_PLAN","CRYPTOPUNKS","ELEMENT_MARKET","ABI_DEFINITION","_ABI_DEFINITION","PERMIT2_PERMIT","PERMIT2_PERMIT_BATCH","PERMIT2_TRANSFER_FROM","PERMIT2_TRANSFER_FROM_BATCH","PERMIT2_TRANSFER_FROM_STRUCT","V3_SWAP_EXACT_IN","V3_SWAP_EXACT_OUT","V2_SWAP_EXACT_IN","V2_SWAP_EXACT_OUT","WRAP_ETH","UNWRAP_WETH","SWEEP","SWEEP_ERC721","SWEEP_ERC1155","TRANSFER","PAY_PORTION","BALANCE_CHECK_ERC20","OWNER_CHECK_721","OWNER_CHECK_1155","APPROVE_ERC20","WRAP_STETH","UNWRAP_STETH","RoutePlanner","commands","inputs","_proto","prototype","addSubPlan","subplan","addCommand","type","parameters","allowRevert","command","encodedInput","defaultAbiCoder","encode","createCommand","push","has","Error","concat","toString","padStart","NOT_SUPPORTED_ON_CHAIN","CHAIN_CONFIGS","_CHAIN_CONFIGS","router","weth","steth","wsteth","creationBlock","WETH_ADDRESS","chainId","STETH_ADDRESS","CONTRACT_BALANCE","BigNumber","from","pow","ETH_ADDRESS","ZERO_ADDRESS","SENDER_AS_RECIPIENT","ROUTER_AS_RECIPIENT","REFUND_ETH_PRICE_IMPACT_THRESHOLD","Percent","UniswapTrade","trade","options","fee","flatFee","planner","_config","payerIsUser","payerIsRouter","inputAmount","currency","isNative","maximumAmountIn","slippageTolerance","quotient","recipient","_this$options$recipie","swapOptions","_step","outputIsNative","outputAmount","inputIsNative","routerMustCustody","tradeType","TradeType","EXACT_INPUT","routes","_iterator","_createForOfIteratorHelperLoose","swaps","done","swap","value","route","protocol","Protocol","V2","addV2Swap","V3","addV3Swap","MIXED","addMixedSwap","minimumAmountOut","feeBips","toHex","multiply","wrapped","address","EXACT_OUTPUT","sub","mul","div","feeAmount","amount","lt","priceImpact","greaterThan","_ref","V2Trade","path","map","pool","_ref2","V3Trade","createUncheckedTrade","encodeRouteToPath","tradeRecipient","pools","Pool","Pair","outputToken","MixedRouteTrade","amountIn","amountOut","sections","partitionMixedRouteByProtocol","isLastSectionInRoute","i","inputToken","input","section","getOutputOfPools","newRouteOriginal","MixedRouteSDK","token0","equals","token1","newRoute","MixedRoute","every","mixedRouteIsAllV3","encodeMixedRouteToPath","liquidityToken","encodePermit","permit2","signature","ethers","utils","arrayify","joinSignature","splitSignature","encodeInputTokenOptions","approval","permit2Permit","token","details","permit2TransferFrom","mapApprovalProtocol","protocolAddress","toLowerCase","SwapRouter","swapCallParameters","trades","config","Array","isArray","nftTrades","filter","_","hasOwnProperty","currentNativeValueInRouter","transactionValue","nftInputTokens","nftTrade","tradePrice","getTotalPrice","Seaport","getInputTokens","forEach","add","uniswapTrade","inputTokenPermit","UnwrapWETH","WrapSTETH","UnwrapSTETH","encodePlan","swapNFTCallParameters","_step2","totalPrice","_iterator2","swapERC20CallParameters","inputCurrency","nativeCurrencyValue","deadline","deadlineOrPreviousBlockhash","undefined","calldata","INTERFACE","encodeFunctionData","toHexString","Interface","abi","CryptopunkTrade","_NFTTrade","call","Cryptopunks","_inheritsLoose","item","tokenId","getBuyItems","buyItems","tokenAddress","CRYPTOPUNK_ADDRESS","tokenType","Cryptopunk","_step3","total","_iterator3","FoundationTrade","Foundation","price","referrer","ERC721","LooksRareV2Trade","LooksRareV2","_this$refactorAPIData","refactorAPIData","takerBids","makerOrders","makerSignatures","totalValue","merkleTrees","apiOrder","collection","collectionType","ERC721_ORDER","ERC1155","itemIds","order","_extends","taker","additionalParameters","root","_order$apiOrder$merkl","merkleRoot","proof","_order$apiOrder$merkl2","merkleProof","NFT20Trade","tokenIds","tokenAmounts","isV3","_step4","_iterator4","NFTXTrade","vaultId","swapCalldata","SeaportTrade","advancedOrders","orderFulfillments","items","index","orderIndex","itemIndex","considerationFulFillments","getConsiderationFulfillments","_this$getAdvancedOrde","getAdvancedOrderParams","advancedOrder","OPENSEA_CONDUIT_KEY","inputTokenProcessing","protocolApproval","getTotalOrderPrice","commandMap","_step5","_iterator5","_step6","_iterator6","offer","identifierOrCriteria","_step7","inputTokens","_iterator7","_step8","_iterator8","_step9","_iterator9","consideration","_step10","totalOrderPrice","_iterator10","calculateValue","_step11","_iterator11","_step12","_iterator12","protocolDatas","considerationFulfillments","considerationRecipients","protocolData","_loop","j","findIndex","x","recipientIndex","data","numerator","denominator","extraData","considerations","reduce","amt","startAmount","SudoswapTrade","Sudoswap","swapInfo","maxCost","ethRecipient","nftRecipient","prevVal","nftIds","X2Y2Trade","X2Y2","getSighash","getFunction","signedInput","slice","tokenAmount","wethAddress","permit2Data","wrapAmount","stethAddress","amountMinimum"],"mappings":"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"}