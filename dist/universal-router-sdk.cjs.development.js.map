{"version":3,"file":"universal-router-sdk.cjs.development.js","sources":["../src/entities/Command.ts","../src/entities/NFTTrade.ts","../src/utils/routerCommands.ts","../src/utils/constants.ts","../src/utils/numbers.ts","../src/entities/protocols/uniswap.ts","../src/utils/inputTokens.ts","../src/swapRouter.ts","../src/entities/protocols/cryptopunk.ts","../src/entities/protocols/foundation.ts","../src/entities/protocols/looksRareV2.ts","../src/entities/protocols/nft20.ts","../src/entities/protocols/nftx.ts","../src/entities/protocols/seaport.ts","../src/entities/protocols/sudoswap.ts","../src/entities/protocols/x2y2.ts","../src/entities/protocols/unwrapWETH.ts","../src/entities/protocols/wrapSTETH.ts","../src/entities/protocols/unwrapSTETH.ts"],"sourcesContent":["import { RoutePlanner } from '../utils/routerCommands'\n\nexport type TradeConfig = {\n  allowRevert: boolean\n}\n\nexport enum RouterTradeType {\n  UniswapTrade = 'UniswapTrade',\n  NFTTrade = 'NFTTrade',\n  UnwrapWETH = 'UnwrapWETH',\n  WrapSTETH = 'WrapSTETH',\n  UnwrapSTETH = 'UnwrapSTETH',\n}\n\n// interface for entities that can be encoded as a Universal Router command\nexport interface Command {\n  tradeType: RouterTradeType\n  encode(planner: RoutePlanner, config: TradeConfig): void\n}\n","import invariant from 'tiny-invariant'\nimport { BigNumber, BigNumberish } from 'ethers'\nimport { SeaportData } from './protocols/seaport'\nimport { FoundationData } from './protocols/foundation'\nimport { NFTXData } from './protocols/nftx'\nimport { NFT20Data } from './protocols/nft20'\nimport { RoutePlanner } from '../utils/routerCommands'\nimport { Command, RouterTradeType, TradeConfig } from './Command'\nimport { SudoswapData } from './protocols/sudoswap'\nimport { CryptopunkData } from './protocols/cryptopunk'\nimport { X2Y2Data } from './protocols/x2y2'\nimport { ElementData } from './protocols/element-market'\nimport { LooksRareV2Data } from './protocols/looksRareV2'\n\nexport type SupportedProtocolsData =\n  | SeaportData\n  | FoundationData\n  | NFTXData\n  | LooksRareV2Data\n  | X2Y2Data\n  | CryptopunkData\n  | NFT20Data\n  | SudoswapData\n  | ElementData\n\nexport abstract class NFTTrade<T> implements Command {\n  readonly tradeType: RouterTradeType = RouterTradeType.NFTTrade\n  readonly orders: T[]\n  readonly market: Market\n\n  constructor(market: Market, orders: T[]) {\n    invariant(orders.length > 0, 'no buy Items')\n    this.market = market\n    this.orders = orders\n  }\n\n  abstract encode(planner: RoutePlanner, config: TradeConfig): void\n\n  abstract getBuyItems(): BuyItem[]\n\n  // optional parameter for the markets that accept ERC20s not just ETH\n  abstract getTotalPrice(token?: string): BigNumber\n}\n\nexport type BuyItem = {\n  tokenAddress: string\n  tokenId: BigNumberish\n  tokenType: TokenType\n  amount?: BigNumberish // for 1155\n}\n\nexport enum Market {\n  Foundation = 'foundation',\n  LooksRareV2 = 'looksrareV2',\n  NFT20 = 'nft20',\n  NFTX = 'nftx',\n  Seaport = 'seaport',\n  Sudoswap = 'Sudoswap',\n  Cryptopunks = 'cryptopunks',\n  X2Y2 = 'x2y2',\n  Element = 'element',\n}\n\nexport enum TokenType {\n  ERC721 = 'ERC721',\n  ERC1155 = 'ERC1155',\n  Cryptopunk = 'Cryptopunk',\n}\n","import { defaultAbiCoder } from 'ethers/lib/utils'\n\n/**\n * CommandTypes\n * @description Flags that modify a command's execution\n * @enum {number}\n */\nexport enum CommandType {\n  V3_SWAP_EXACT_IN = 0x00,\n  V3_SWAP_EXACT_OUT = 0x01,\n  PERMIT2_TRANSFER_FROM = 0x02,\n  PERMIT2_PERMIT_BATCH = 0x03,\n  SWEEP = 0x04,\n  TRANSFER = 0x05,\n  PAY_PORTION = 0x06,\n\n  V2_SWAP_EXACT_IN = 0x08,\n  V2_SWAP_EXACT_OUT = 0x09,\n  PERMIT2_PERMIT = 0x0a,\n  WRAP_ETH = 0x0b,\n  UNWRAP_WETH = 0x0c,\n  PERMIT2_TRANSFER_FROM_BATCH = 0x0d,\n  BALANCE_CHECK_ERC20 = 0x0e,\n\n  // NFT-related command types\n  SEAPORT_V1_5 = 0x10,\n  LOOKS_RARE_V2 = 0x11,\n  NFTX = 0x12,\n  CRYPTOPUNKS = 0x13,\n  // 0x14\n  OWNER_CHECK_721 = 0x15,\n  OWNER_CHECK_1155 = 0x16,\n  SWEEP_ERC721 = 0x17,\n\n  X2Y2_721 = 0x18,\n  SUDOSWAP = 0x19,\n  NFT20 = 0x1a,\n  X2Y2_1155 = 0x1b,\n  FOUNDATION = 0x1c,\n  SWEEP_ERC1155 = 0x1d,\n  ELEMENT_MARKET = 0x1e,\n\n  SEAPORT_V1_4 = 0x20,\n  EXECUTE_SUB_PLAN = 0x21,\n  APPROVE_ERC20 = 0x22,\n  WRAP_STETH = 0x23,\n  UNWRAP_STETH = 0x24,\n}\n\nconst ALLOW_REVERT_FLAG = 0x80\n\nconst REVERTIBLE_COMMANDS = new Set<CommandType>([\n  CommandType.SEAPORT_V1_5,\n  CommandType.SEAPORT_V1_4,\n  CommandType.NFTX,\n  CommandType.LOOKS_RARE_V2,\n  CommandType.X2Y2_721,\n  CommandType.X2Y2_1155,\n  CommandType.FOUNDATION,\n  CommandType.SUDOSWAP,\n  CommandType.NFT20,\n  CommandType.EXECUTE_SUB_PLAN,\n  CommandType.CRYPTOPUNKS,\n  CommandType.ELEMENT_MARKET,\n])\n\nconst PERMIT_STRUCT =\n  '((address token,uint160 amount,uint48 expiration,uint48 nonce) details,address spender,uint256 sigDeadline)'\n\nconst PERMIT_BATCH_STRUCT =\n  '((address token,uint160 amount,uint48 expiration,uint48 nonce)[] details,address spender,uint256 sigDeadline)'\n\nconst PERMIT2_TRANSFER_FROM_STRUCT = '(address from,address to,uint160 amount,address token)'\nconst PERMIT2_TRANSFER_FROM_BATCH_STRUCT = PERMIT2_TRANSFER_FROM_STRUCT + '[]'\n\nconst ABI_DEFINITION: { [key in CommandType]: string[] } = {\n  // Batch Reverts\n  [CommandType.EXECUTE_SUB_PLAN]: ['bytes', 'bytes[]'],\n\n  // Permit2 Actions\n  [CommandType.PERMIT2_PERMIT]: [PERMIT_STRUCT, 'bytes'],\n  [CommandType.PERMIT2_PERMIT_BATCH]: [PERMIT_BATCH_STRUCT, 'bytes'],\n  [CommandType.PERMIT2_TRANSFER_FROM]: ['address', 'address', 'uint160'],\n  [CommandType.PERMIT2_TRANSFER_FROM_BATCH]: [PERMIT2_TRANSFER_FROM_BATCH_STRUCT],\n\n  // Uniswap Actions\n  [CommandType.V3_SWAP_EXACT_IN]: ['address', 'uint256', 'uint256', 'bytes', 'bool'],\n  [CommandType.V3_SWAP_EXACT_OUT]: ['address', 'uint256', 'uint256', 'bytes', 'bool'],\n  [CommandType.V2_SWAP_EXACT_IN]: ['address', 'uint256', 'uint256', 'address[]', 'bool'],\n  [CommandType.V2_SWAP_EXACT_OUT]: ['address', 'uint256', 'uint256', 'address[]', 'bool'],\n\n  // Token Actions and Checks\n  [CommandType.WRAP_ETH]: ['address', 'uint256'],\n  [CommandType.UNWRAP_WETH]: ['address', 'uint256'],\n  [CommandType.SWEEP]: ['address', 'address', 'uint256'],\n  [CommandType.SWEEP_ERC721]: ['address', 'address', 'uint256'],\n  [CommandType.SWEEP_ERC1155]: ['address', 'address', 'uint256', 'uint256'],\n  [CommandType.TRANSFER]: ['address', 'address', 'uint256'],\n  [CommandType.PAY_PORTION]: ['address', 'address', 'uint256'],\n  [CommandType.BALANCE_CHECK_ERC20]: ['address', 'address', 'uint256'],\n  [CommandType.OWNER_CHECK_721]: ['address', 'address', 'uint256'],\n  [CommandType.OWNER_CHECK_1155]: ['address', 'address', 'uint256', 'uint256'],\n  [CommandType.APPROVE_ERC20]: ['address', 'uint256'],\n  [CommandType.WRAP_STETH]: ['address', 'uint256'],\n  [CommandType.UNWRAP_STETH]: ['address', 'uint256'],\n\n  // NFT Markets\n  [CommandType.SEAPORT_V1_5]: ['uint256', 'bytes'],\n  [CommandType.SEAPORT_V1_4]: ['uint256', 'bytes'],\n  [CommandType.NFTX]: ['uint256', 'bytes'],\n  [CommandType.LOOKS_RARE_V2]: ['uint256', 'bytes'],\n  [CommandType.X2Y2_721]: ['uint256', 'bytes', 'address', 'address', 'uint256'],\n  [CommandType.X2Y2_1155]: ['uint256', 'bytes', 'address', 'address', 'uint256', 'uint256'],\n  [CommandType.FOUNDATION]: ['uint256', 'bytes', 'address', 'address', 'uint256'],\n  [CommandType.SUDOSWAP]: ['uint256', 'bytes'],\n  [CommandType.NFT20]: ['uint256', 'bytes'],\n  [CommandType.CRYPTOPUNKS]: ['uint256', 'address', 'uint256'],\n  [CommandType.ELEMENT_MARKET]: ['uint256', 'bytes'],\n}\n\nexport class RoutePlanner {\n  commands: string\n  inputs: string[]\n\n  constructor() {\n    this.commands = '0x'\n    this.inputs = []\n  }\n\n  addSubPlan(subplan: RoutePlanner): void {\n    this.addCommand(CommandType.EXECUTE_SUB_PLAN, [subplan.commands, subplan.inputs], true)\n  }\n\n  addCommand(type: CommandType, parameters: any[], allowRevert = false): void {\n    let command = createCommand(type, parameters)\n    this.inputs.push(command.encodedInput)\n    if (allowRevert) {\n      if (!REVERTIBLE_COMMANDS.has(command.type)) {\n        throw new Error(`command type: ${command.type} cannot be allowed to revert`)\n      }\n      command.type = command.type | ALLOW_REVERT_FLAG\n    }\n\n    this.commands = this.commands.concat(command.type.toString(16).padStart(2, '0'))\n  }\n}\n\nexport type RouterCommand = {\n  type: CommandType\n  encodedInput: string\n}\n\nexport function createCommand(type: CommandType, parameters: any[]): RouterCommand {\n  const encodedInput = defaultAbiCoder.encode(ABI_DEFINITION[type], parameters)\n  return { type, encodedInput }\n}\n","import { BigNumber } from 'ethers'\n\ntype ChainConfig = {\n  router: string\n  creationBlock: number\n  weth: string\n  steth: string\n  wsteth: string\n}\n\nexport const NOT_SUPPORTED_ON_CHAIN = '0x0000000000000000000000000000000000000000'\n\nconst CHAIN_CONFIGS: { [key: number]: ChainConfig } = {\n  // mainnet\n  [1]: {\n    router: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n    weth: '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2',\n    steth: '0xae7ab96520de3a18e5e111b5eaab095312d7fe84',\n    wsteth: '0x7f39c581f595b53c5cb19bd0b3f8da6c935e2ca0',\n    creationBlock: 17143817,\n  },\n  // goerli\n  [5]: {\n    router: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n    weth: '0xb4fbf271143f4fbf7b91a5ded31805e42b2208d6',\n    steth: '0x1643E812aE58766192Cf7D2Cf9567dF2C37e9B7F',\n    wsteth: '0x6320cD32aA674d2898A68ec82e869385Fc5f7E2f',\n    creationBlock: 8940568,\n  },\n  // sepolia\n  [11155111]: {\n    router: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n    weth: '0xfFf9976782d46CC05630D1f6eBAb18b2324d6B14',\n    steth: NOT_SUPPORTED_ON_CHAIN,\n    wsteth: NOT_SUPPORTED_ON_CHAIN,\n    creationBlock: 3543575,\n  },\n  // polygon\n  [137]: {\n    router: '0x643770E279d5D0733F21d6DC03A8efbABf3255B4',\n    weth: '0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270',\n    steth: NOT_SUPPORTED_ON_CHAIN,\n    wsteth: NOT_SUPPORTED_ON_CHAIN,\n    creationBlock: 46866777,\n  },\n  //polygon mumbai\n  [80001]: {\n    router: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n    weth: '0x9c3C9283D3e44854697Cd22D3Faa240Cfb032889',\n    steth: NOT_SUPPORTED_ON_CHAIN,\n    wsteth: NOT_SUPPORTED_ON_CHAIN,\n    creationBlock: 35176052,\n  },\n  //optimism\n  [10]: {\n    router: '0xeC8B0F7Ffe3ae75d7FfAb09429e3675bb63503e4',\n    weth: '0x4200000000000000000000000000000000000006',\n    steth: NOT_SUPPORTED_ON_CHAIN,\n    wsteth: NOT_SUPPORTED_ON_CHAIN,\n    creationBlock: 108825869,\n  },\n  // optimism goerli\n  [420]: {\n    router: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n    weth: '0x4200000000000000000000000000000000000006',\n    steth: NOT_SUPPORTED_ON_CHAIN,\n    wsteth: NOT_SUPPORTED_ON_CHAIN,\n    creationBlock: 8887728,\n  },\n  // arbitrum\n  [42161]: {\n    router: '0xeC8B0F7Ffe3ae75d7FfAb09429e3675bb63503e4',\n    weth: '0x82aF49447D8a07e3bd95BD0d56f35241523fBab1',\n    steth: NOT_SUPPORTED_ON_CHAIN,\n    wsteth: NOT_SUPPORTED_ON_CHAIN,\n    creationBlock: 125861718,\n  },\n  // arbitrum goerli\n  [421613]: {\n    router: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n    weth: '0xe39Ab88f8A4777030A534146A9Ca3B52bd5D43A3',\n    steth: NOT_SUPPORTED_ON_CHAIN,\n    wsteth: NOT_SUPPORTED_ON_CHAIN,\n    creationBlock: 18815277,\n  },\n  // celo\n  [42220]: {\n    router: '0x88a3ED7F21A3fCF6adb86b6F878C5B7a02D20e9b',\n    weth: NOT_SUPPORTED_ON_CHAIN,\n    steth: NOT_SUPPORTED_ON_CHAIN,\n    wsteth: NOT_SUPPORTED_ON_CHAIN,\n    creationBlock: 21116361,\n  },\n  // celo alfajores\n  [44787]: {\n    router: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n    weth: NOT_SUPPORTED_ON_CHAIN,\n    steth: NOT_SUPPORTED_ON_CHAIN,\n    wsteth: NOT_SUPPORTED_ON_CHAIN,\n    creationBlock: 17566658,\n  },\n  // binance smart chain\n  [56]: {\n    router: '0xeC8B0F7Ffe3ae75d7FfAb09429e3675bb63503e4',\n    weth: '0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c',\n    steth: NOT_SUPPORTED_ON_CHAIN,\n    wsteth: NOT_SUPPORTED_ON_CHAIN,\n    creationBlock: 31254967,\n  },\n  // avalanche\n  [43114]: {\n    router: '0x82635AF6146972cD6601161c4472ffe97237D292',\n    weth: '0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7',\n    steth: NOT_SUPPORTED_ON_CHAIN,\n    wsteth: NOT_SUPPORTED_ON_CHAIN,\n    creationBlock: 34491144,\n  },\n  // base goerli\n  [84531]: {\n    router: '0xd0872d928672ae2ff74bdb2f5130ac12229cafaf',\n    weth: '0x4200000000000000000000000000000000000006',\n    steth: NOT_SUPPORTED_ON_CHAIN,\n    wsteth: NOT_SUPPORTED_ON_CHAIN,\n    creationBlock: 6915289,\n  },\n  // base mainnet\n  [8453]: {\n    router: '0xeC8B0F7Ffe3ae75d7FfAb09429e3675bb63503e4',\n    weth: '0x4200000000000000000000000000000000000006',\n    steth: NOT_SUPPORTED_ON_CHAIN,\n    wsteth: NOT_SUPPORTED_ON_CHAIN,\n    creationBlock: 3229053,\n  },\n  // zkatana\n  [1261120]: {\n    router: '0x1a3165C512D06b015afB6bD760Cf22c056bE8CF7',\n    weth: '0xEbB3F7644F5D523B4cA7F5d1C94ea023f1D9b066',\n    steth: NOT_SUPPORTED_ON_CHAIN,\n    wsteth: NOT_SUPPORTED_ON_CHAIN,\n    creationBlock: 264552,\n  },\n  //SeiDev\n  [713715]: {\n    router: '0x0EB684486027f2F5cFb4C8a18897381706AeD534',\n    weth: '0x657389E6c95308BD24a9aCB40FDe474d4D580d63',\n    steth: NOT_SUPPORTED_ON_CHAIN,\n    wsteth: NOT_SUPPORTED_ON_CHAIN,\n    creationBlock: 264552,\n  },\n}\n\nexport const UNIVERSAL_ROUTER_ADDRESS = (chainId: number): string => {\n  if (!(chainId in CHAIN_CONFIGS)) throw new Error(`Universal Router not deployed on chain ${chainId}`)\n  return CHAIN_CONFIGS[chainId].router\n}\n\nexport const UNIVERSAL_ROUTER_CREATION_BLOCK = (chainId: number): number => {\n  if (!(chainId in CHAIN_CONFIGS)) throw new Error(`Universal Router not deployed on chain ${chainId}`)\n  return CHAIN_CONFIGS[chainId].creationBlock\n}\n\nexport const WETH_ADDRESS = (chainId: number): string => {\n  if (!(chainId in CHAIN_CONFIGS)) throw new Error(`Universal Router not deployed on chain ${chainId}`)\n\n  if (CHAIN_CONFIGS[chainId].weth == NOT_SUPPORTED_ON_CHAIN) throw new Error(`Chain ${chainId} does not have WETH`)\n\n  return CHAIN_CONFIGS[chainId].weth\n}\n\nexport const STETH_ADDRESS = (chainId: number): string => {\n  if (!(chainId in CHAIN_CONFIGS)) throw new Error(`Universal Router not deployed on chain ${chainId}`)\n\n  if (CHAIN_CONFIGS[chainId].steth == NOT_SUPPORTED_ON_CHAIN)\n    throw new Error(`Chain ${chainId} does not have STETH support`)\n\n  return CHAIN_CONFIGS[chainId].steth\n}\n\nexport const WSTETH_ADDRESS = (chainId: number): string => {\n  if (!(chainId in CHAIN_CONFIGS)) throw new Error(`Universal Router not deployed on chain ${chainId}`)\n\n  if (CHAIN_CONFIGS[chainId].wsteth == NOT_SUPPORTED_ON_CHAIN)\n    throw new Error(`Chain ${chainId} does not have WSTETH support`)\n\n  return CHAIN_CONFIGS[chainId].wsteth\n}\n\nexport const PERMIT2_ADDRESS = '0x000000000022D473030F116dDEE9F6B43aC78BA3'\n\nexport const CONTRACT_BALANCE = BigNumber.from(2).pow(255)\nexport const ETH_ADDRESS = '0x0000000000000000000000000000000000000000'\nexport const ZERO_ADDRESS = '0x0000000000000000000000000000000000000000'\nexport const MAX_UINT256 = BigNumber.from(2).pow(256).sub(1)\nexport const MAX_UINT160 = BigNumber.from(2).pow(160).sub(1)\n\nexport const SENDER_AS_RECIPIENT = '0x0000000000000000000000000000000000000001'\nexport const ROUTER_AS_RECIPIENT = '0x0000000000000000000000000000000000000002'\n\nexport const OPENSEA_CONDUIT_SPENDER_ID = 0\nexport const SUDOSWAP_SPENDER_ID = 1\n","import { BigNumber } from 'ethers'\nimport JSBI from 'jsbi'\nimport bn from 'bignumber.js'\nimport { Percent } from '@uniswap/sdk-core'\nimport { toHex } from '@uniswap/v3-sdk'\n\nexport function expandTo18DecimalsBN(n: number): BigNumber {\n  // use bn intermediately to allow decimals in intermediate calculations\n  return BigNumber.from(new bn(n).times(new bn(10).pow(18)).toFixed())\n}\n\nexport function expandTo18Decimals(n: number): JSBI {\n  return JSBI.BigInt(BigNumber.from(n).mul(BigNumber.from(10).pow(18)).toString())\n}\n\nexport function encodeFeeBips(fee: Percent): string {\n  return toHex(fee.multiply(10_000).quotient)\n}\n","import { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { Trade as V2Trade, Pair } from '@uniswap/v2-sdk'\nimport { Trade as V3Trade, Pool, encodeRouteToPath } from '@uniswap/v3-sdk'\nimport {\n  Trade as RouterTrade,\n  MixedRouteTrade,\n  Protocol,\n  IRoute,\n  RouteV2,\n  RouteV3,\n  MixedRouteSDK,\n  MixedRoute,\n  SwapOptions as RouterSwapOptions,\n  getOutputOfPools,\n  encodeMixedRouteToPath,\n  partitionMixedRouteByProtocol,\n} from '@uniswap/router-sdk'\nimport { Permit2Permit } from '../../utils/inputTokens'\nimport { Currency, TradeType, CurrencyAmount, Percent } from '@uniswap/sdk-core'\nimport { Command, RouterTradeType, TradeConfig } from '../Command'\nimport { SENDER_AS_RECIPIENT, ROUTER_AS_RECIPIENT, CONTRACT_BALANCE } from '../../utils/constants'\nimport { encodeFeeBips } from '../../utils/numbers'\nimport { BigNumber, BigNumberish } from 'ethers'\n\nexport type FlatFeeOptions = {\n  amount: BigNumberish\n  recipient: string\n}\n\n// the existing router permit object doesn't include enough data for permit2\n// so we extend swap options with the permit2 permit\nexport type SwapOptions = Omit<RouterSwapOptions, 'inputTokenPermit'> & {\n  inputTokenPermit?: Permit2Permit\n  payerIsRouter?: boolean\n  flatFee?: FlatFeeOptions\n}\n\nconst REFUND_ETH_PRICE_IMPACT_THRESHOLD = new Percent(50, 100)\n\ninterface Swap<TInput extends Currency, TOutput extends Currency> {\n  route: IRoute<TInput, TOutput, Pair | Pool>\n  inputAmount: CurrencyAmount<TInput>\n  outputAmount: CurrencyAmount<TOutput>\n}\n\n// Wrapper for uniswap router-sdk trade entity to encode swaps for Universal Router\n// also translates trade objects from previous (v2, v3) SDKs\nexport class UniswapTrade implements Command {\n  readonly tradeType: RouterTradeType = RouterTradeType.UniswapTrade\n  constructor(public trade: RouterTrade<Currency, Currency, TradeType>, public options: SwapOptions) {\n    if (!!options.fee && !!options.flatFee) throw new Error('Only one fee option permitted')\n  }\n\n  encode(planner: RoutePlanner, _config: TradeConfig): void {\n    let payerIsUser = !this.options.payerIsRouter\n\n    // If the input currency is the native currency, we need to wrap it with the router as the recipient\n    if (this.trade.inputAmount.currency.isNative) {\n      // TODO: optimize if only one v2 pool we can directly send this to the pool\n      planner.addCommand(CommandType.WRAP_ETH, [\n        ROUTER_AS_RECIPIENT,\n        this.trade.maximumAmountIn(this.options.slippageTolerance).quotient.toString(),\n      ])\n      // since WETH is now owned by the router, the router pays for inputs\n      payerIsUser = false\n    }\n    // The overall recipient at the end of the trade, SENDER_AS_RECIPIENT uses the msg.sender\n    this.options.recipient = this.options.recipient ?? SENDER_AS_RECIPIENT\n\n    // flag for whether we want to perform slippage check on aggregate output of multiple routes\n    //   1. when there are >2 exact input trades. this is only a heuristic,\n    //      as it's still more gas-expensive even in this case, but has benefits\n    //      in that the reversion probability is lower\n    const performAggregatedSlippageCheck =\n      this.trade.tradeType === TradeType.EXACT_INPUT && this.trade.routes.length > 2\n    const outputIsNative = this.trade.outputAmount.currency.isNative\n    const inputIsNative = this.trade.inputAmount.currency.isNative\n    const routerMustCustody = performAggregatedSlippageCheck || outputIsNative || hasFeeOption(this.options)\n\n    for (const swap of this.trade.swaps) {\n      switch (swap.route.protocol) {\n        case Protocol.V2:\n          addV2Swap(planner, swap, this.trade.tradeType, this.options, payerIsUser, routerMustCustody)\n          break\n        case Protocol.V3:\n          addV3Swap(planner, swap, this.trade.tradeType, this.options, payerIsUser, routerMustCustody)\n          break\n        case Protocol.MIXED:\n          addMixedSwap(planner, swap, this.trade.tradeType, this.options, payerIsUser, routerMustCustody)\n          break\n        default:\n          throw new Error('UNSUPPORTED_TRADE_PROTOCOL')\n      }\n    }\n\n    let minimumAmountOut: BigNumber = BigNumber.from(\n      this.trade.minimumAmountOut(this.options.slippageTolerance).quotient.toString()\n    )\n\n    // The router custodies for 3 reasons: to unwrap, to take a fee, and/or to do a slippage check\n    if (routerMustCustody) {\n      // If there is a fee, that percentage is sent to the fee recipient\n      // In the case where ETH is the output currency, the fee is taken in WETH (for gas reasons)\n      if (!!this.options.fee) {\n        const feeBips = encodeFeeBips(this.options.fee.fee)\n        planner.addCommand(CommandType.PAY_PORTION, [\n          this.trade.outputAmount.currency.wrapped.address,\n          this.options.fee.recipient,\n          feeBips,\n        ])\n\n        // If the trade is exact output, and a fee was taken, we must adjust the amount out to be the amount after the fee\n        // Otherwise we continue as expected with the trade's normal expected output\n        if (this.trade.tradeType === TradeType.EXACT_OUTPUT) {\n          minimumAmountOut = minimumAmountOut.sub(minimumAmountOut.mul(feeBips).div(10000))\n        }\n      }\n\n      // If there is a flat fee, that absolute amount is sent to the fee recipient\n      // In the case where ETH is the output currency, the fee is taken in WETH (for gas reasons)\n      if (!!this.options.flatFee) {\n        const feeAmount = this.options.flatFee.amount\n        if (minimumAmountOut.lt(feeAmount)) throw new Error('Flat fee amount greater than minimumAmountOut')\n\n        planner.addCommand(CommandType.TRANSFER, [\n          this.trade.outputAmount.currency.wrapped.address,\n          this.options.flatFee.recipient,\n          feeAmount,\n        ])\n\n        // If the trade is exact output, and a fee was taken, we must adjust the amount out to be the amount after the fee\n        // Otherwise we continue as expected with the trade's normal expected output\n        if (this.trade.tradeType === TradeType.EXACT_OUTPUT) {\n          minimumAmountOut = minimumAmountOut.sub(feeAmount)\n        }\n      }\n\n      // The remaining tokens that need to be sent to the user after the fee is taken will be caught\n      // by this if-else clause.\n      if (outputIsNative) {\n        planner.addCommand(CommandType.UNWRAP_WETH, [this.options.recipient, minimumAmountOut])\n      } else {\n        planner.addCommand(CommandType.SWEEP, [\n          this.trade.outputAmount.currency.wrapped.address,\n          this.options.recipient,\n          minimumAmountOut,\n        ])\n      }\n    }\n\n    if (inputIsNative && (this.trade.tradeType === TradeType.EXACT_OUTPUT || riskOfPartialFill(this.trade))) {\n      // for exactOutput swaps that take native currency as input\n      // we need to send back the change to the user\n      planner.addCommand(CommandType.UNWRAP_WETH, [this.options.recipient, 0])\n    }\n  }\n}\n\n// encode a uniswap v2 swap\nfunction addV2Swap<TInput extends Currency, TOutput extends Currency>(\n  planner: RoutePlanner,\n  { route, inputAmount, outputAmount }: Swap<TInput, TOutput>,\n  tradeType: TradeType,\n  options: SwapOptions,\n  payerIsUser: boolean,\n  routerMustCustody: boolean\n): void {\n  const trade = new V2Trade(\n    route as RouteV2<TInput, TOutput>,\n    tradeType == TradeType.EXACT_INPUT ? inputAmount : outputAmount,\n    tradeType\n  )\n\n  if (tradeType == TradeType.EXACT_INPUT) {\n    planner.addCommand(CommandType.V2_SWAP_EXACT_IN, [\n      // if native, we have to unwrap so keep in the router for now\n      routerMustCustody ? ROUTER_AS_RECIPIENT : options.recipient,\n      trade.maximumAmountIn(options.slippageTolerance).quotient.toString(),\n      trade.minimumAmountOut(options.slippageTolerance).quotient.toString(),\n      route.path.map((pool) => pool.address),\n      payerIsUser,\n    ])\n  } else if (tradeType == TradeType.EXACT_OUTPUT) {\n    planner.addCommand(CommandType.V2_SWAP_EXACT_OUT, [\n      routerMustCustody ? ROUTER_AS_RECIPIENT : options.recipient,\n      trade.minimumAmountOut(options.slippageTolerance).quotient.toString(),\n      trade.maximumAmountIn(options.slippageTolerance).quotient.toString(),\n      route.path.map((pool) => pool.address),\n      payerIsUser,\n    ])\n  }\n}\n\n// encode a uniswap v3 swap\nfunction addV3Swap<TInput extends Currency, TOutput extends Currency>(\n  planner: RoutePlanner,\n  { route, inputAmount, outputAmount }: Swap<TInput, TOutput>,\n  tradeType: TradeType,\n  options: SwapOptions,\n  payerIsUser: boolean,\n  routerMustCustody: boolean\n): void {\n  const trade = V3Trade.createUncheckedTrade({\n    route: route as RouteV3<TInput, TOutput>,\n    inputAmount,\n    outputAmount,\n    tradeType,\n  })\n\n  const path = encodeRouteToPath(route as RouteV3<TInput, TOutput>, trade.tradeType === TradeType.EXACT_OUTPUT)\n  if (tradeType == TradeType.EXACT_INPUT) {\n    planner.addCommand(CommandType.V3_SWAP_EXACT_IN, [\n      routerMustCustody ? ROUTER_AS_RECIPIENT : options.recipient,\n      trade.maximumAmountIn(options.slippageTolerance).quotient.toString(),\n      trade.minimumAmountOut(options.slippageTolerance).quotient.toString(),\n      path,\n      payerIsUser,\n    ])\n  } else if (tradeType == TradeType.EXACT_OUTPUT) {\n    planner.addCommand(CommandType.V3_SWAP_EXACT_OUT, [\n      routerMustCustody ? ROUTER_AS_RECIPIENT : options.recipient,\n      trade.minimumAmountOut(options.slippageTolerance).quotient.toString(),\n      trade.maximumAmountIn(options.slippageTolerance).quotient.toString(),\n      path,\n      payerIsUser,\n    ])\n  }\n}\n\n// encode a mixed route swap, i.e. including both v2 and v3 pools\nfunction addMixedSwap<TInput extends Currency, TOutput extends Currency>(\n  planner: RoutePlanner,\n  swap: Swap<TInput, TOutput>,\n  tradeType: TradeType,\n  options: SwapOptions,\n  payerIsUser: boolean,\n  routerMustCustody: boolean\n): void {\n  const { route, inputAmount, outputAmount } = swap\n  const tradeRecipient = routerMustCustody ? ROUTER_AS_RECIPIENT : options.recipient\n\n  // single hop, so it can be reduced to plain v2 or v3 swap logic\n  if (route.pools.length === 1) {\n    if (route.pools[0] instanceof Pool) {\n      return addV3Swap(planner, swap, tradeType, options, payerIsUser, routerMustCustody)\n    } else if (route.pools[0] instanceof Pair) {\n      return addV2Swap(planner, swap, tradeType, options, payerIsUser, routerMustCustody)\n    } else {\n      throw new Error('Invalid route type')\n    }\n  }\n\n  const trade = MixedRouteTrade.createUncheckedTrade({\n    route: route as MixedRoute<TInput, TOutput>,\n    inputAmount,\n    outputAmount,\n    tradeType,\n  })\n\n  const amountIn = trade.maximumAmountIn(options.slippageTolerance, inputAmount).quotient.toString()\n  const amountOut = trade.minimumAmountOut(options.slippageTolerance, outputAmount).quotient.toString()\n\n  // logic from\n  // https://github.com/Uniswap/router-sdk/blob/d8eed164e6c79519983844ca8b6a3fc24ebcb8f8/src/swapRouter.ts#L276\n  const sections = partitionMixedRouteByProtocol(route as MixedRoute<TInput, TOutput>)\n  const isLastSectionInRoute = (i: number) => {\n    return i === sections.length - 1\n  }\n\n  let outputToken\n  let inputToken = route.input.wrapped\n\n  for (let i = 0; i < sections.length; i++) {\n    const section = sections[i]\n    /// Now, we get output of this section\n    outputToken = getOutputOfPools(section, inputToken)\n\n    const newRouteOriginal = new MixedRouteSDK(\n      [...section],\n      section[0].token0.equals(inputToken) ? section[0].token0 : section[0].token1,\n      outputToken\n    )\n    const newRoute = new MixedRoute(newRouteOriginal)\n\n    /// Previous output is now input\n    inputToken = outputToken\n\n    const mixedRouteIsAllV3 = (route: MixedRouteSDK<Currency, Currency>) => {\n      return route.pools.every((pool) => pool instanceof Pool)\n    }\n\n    if (mixedRouteIsAllV3(newRoute)) {\n      const path: string = encodeMixedRouteToPath(newRoute)\n\n      planner.addCommand(CommandType.V3_SWAP_EXACT_IN, [\n        // if not last section: send tokens directly to the first v2 pair of the next section\n        // note: because of the partitioning function we can be sure that the next section is v2\n        isLastSectionInRoute(i) ? tradeRecipient : (sections[i + 1][0] as Pair).liquidityToken.address,\n        i == 0 ? amountIn : CONTRACT_BALANCE, // amountIn\n        !isLastSectionInRoute(i) ? 0 : amountOut, // amountOut\n        path, // path\n        payerIsUser && i === 0, // payerIsUser\n      ])\n    } else {\n      planner.addCommand(CommandType.V2_SWAP_EXACT_IN, [\n        isLastSectionInRoute(i) ? tradeRecipient : ROUTER_AS_RECIPIENT, // recipient\n        i === 0 ? amountIn : CONTRACT_BALANCE, // amountIn\n        !isLastSectionInRoute(i) ? 0 : amountOut, // amountOutMin\n        newRoute.path.map((pool) => pool.address), // path\n        payerIsUser && i === 0,\n      ])\n    }\n  }\n}\n\n// if price impact is very high, there's a chance of hitting max/min prices resulting in a partial fill of the swap\nfunction riskOfPartialFill(trade: RouterTrade<Currency, Currency, TradeType>): boolean {\n  return trade.priceImpact.greaterThan(REFUND_ETH_PRICE_IMPACT_THRESHOLD)\n}\n\nfunction hasFeeOption(swapOptions: SwapOptions): boolean {\n  return !!swapOptions.fee || !!swapOptions.flatFee\n}\n","import invariant from 'tiny-invariant'\nimport { ethers } from 'ethers'\nimport { PermitSingle } from '@uniswap/permit2-sdk'\nimport { CommandType, RoutePlanner } from './routerCommands'\nimport { OPENSEA_CONDUIT_SPENDER_ID, ROUTER_AS_RECIPIENT, SUDOSWAP_SPENDER_ID } from './constants'\n\nexport interface Permit2Permit extends PermitSingle {\n  signature: string\n}\n\nexport type ApproveProtocol = {\n  token: string\n  protocol: string\n}\n\nexport type Permit2TransferFrom = {\n  token: string\n  amount: string\n  recipient?: string\n}\n\nexport type InputTokenOptions = {\n  approval?: ApproveProtocol\n  permit2Permit?: Permit2Permit\n  permit2TransferFrom?: Permit2TransferFrom\n}\n\nconst SIGNATURE_LENGTH = 65\nconst EIP_2098_SIGNATURE_LENGTH = 64\n\nexport function encodePermit(planner: RoutePlanner, permit2: Permit2Permit): void {\n  let signature = permit2.signature\n\n  const length = ethers.utils.arrayify(permit2.signature).length\n  // signature data provided for EIP-1271 may have length different from ECDSA signature\n  if (length === SIGNATURE_LENGTH || length === EIP_2098_SIGNATURE_LENGTH) {\n    // sanitizes signature to cover edge cases of malformed EIP-2098 sigs and v used as recovery id\n    signature = ethers.utils.joinSignature(ethers.utils.splitSignature(permit2.signature))\n  }\n\n  planner.addCommand(CommandType.PERMIT2_PERMIT, [permit2, signature])\n}\n\n// Handles the encoding of commands needed to gather input tokens for a trade\n// Approval: The router approving another address to take tokens.\n//   note: Only seaport and sudoswap support this action. Approvals are left open.\n// Permit: A Permit2 signature-based Permit to allow the router to access a user's tokens\n// Transfer: A Permit2 TransferFrom of tokens from a user to either the router or another address\nexport function encodeInputTokenOptions(planner: RoutePlanner, options: InputTokenOptions) {\n  // first ensure that all tokens provided for encoding are the same\n  if (!!options.approval && !!options.permit2Permit)\n    invariant(options.approval.token === options.permit2Permit.details.token, `inconsistent token`)\n  if (!!options.approval && !!options.permit2TransferFrom)\n    invariant(options.approval.token === options.permit2TransferFrom.token, `inconsistent token`)\n  if (!!options.permit2TransferFrom && !!options.permit2Permit)\n    invariant(options.permit2TransferFrom.token === options.permit2Permit.details.token, `inconsistent token`)\n\n  // if an options.approval is required, add it\n  if (!!options.approval) {\n    planner.addCommand(CommandType.APPROVE_ERC20, [\n      options.approval.token,\n      mapApprovalProtocol(options.approval.protocol),\n    ])\n  }\n\n  // if this order has a options.permit2Permit, encode it\n  if (!!options.permit2Permit) {\n    encodePermit(planner, options.permit2Permit)\n  }\n\n  if (!!options.permit2TransferFrom) {\n    planner.addCommand(CommandType.PERMIT2_TRANSFER_FROM, [\n      options.permit2TransferFrom.token,\n      options.permit2TransferFrom.recipient ? options.permit2TransferFrom.recipient : ROUTER_AS_RECIPIENT,\n      options.permit2TransferFrom.amount,\n    ])\n  }\n}\n\nfunction mapApprovalProtocol(protocolAddress: string): number {\n  switch (protocolAddress.toLowerCase()) {\n    case '0x00000000000000adc04c56bf30ac9d3c0aaf14dc': // Seaport v1.5\n      return OPENSEA_CONDUIT_SPENDER_ID\n    case '0x00000000000001ad428e4906ae43d8f9852d0dd6': // Seaport v1.4\n      return OPENSEA_CONDUIT_SPENDER_ID\n    case '0x2b2e8cda09bba9660dca5cb6233787738ad68329': // Sudoswap\n      return SUDOSWAP_SPENDER_ID\n    default:\n      throw new Error('unsupported protocol address')\n  }\n}\n","import invariant from 'tiny-invariant'\nimport { abi } from '@uniswap/universal-router/artifacts/contracts/UniversalRouter.sol/UniversalRouter.json'\nimport { Interface } from '@ethersproject/abi'\nimport { BigNumber, BigNumberish } from 'ethers'\nimport { MethodParameters } from '@uniswap/v3-sdk'\nimport { Trade as RouterTrade } from '@uniswap/router-sdk'\nimport { Currency, TradeType } from '@uniswap/sdk-core'\nimport { Command, RouterTradeType } from './entities/Command'\nimport { Market, NFTTrade, SupportedProtocolsData } from './entities/NFTTrade'\nimport { UniswapTrade, SwapOptions } from './entities/protocols/uniswap'\nimport { UnwrapWETH } from './entities/protocols/unwrapWETH'\nimport { CommandType, RoutePlanner } from './utils/routerCommands'\nimport { encodePermit } from './utils/inputTokens'\nimport { ROUTER_AS_RECIPIENT, SENDER_AS_RECIPIENT, ETH_ADDRESS } from './utils/constants'\nimport { SeaportTrade } from './entities'\n\nexport type SwapRouterConfig = {\n  sender?: string // address\n  deadline?: BigNumberish\n}\n\ntype SupportedNFTTrade = NFTTrade<SupportedProtocolsData>\n\nexport abstract class SwapRouter {\n  public static INTERFACE: Interface = new Interface(abi)\n\n  public static swapCallParameters(trades: Command[] | Command, config: SwapRouterConfig = {}): MethodParameters {\n    if (!Array.isArray(trades)) trades = [trades]\n\n    const nftTrades = trades.filter((trade, _, []) => trade.hasOwnProperty('market')) as SupportedNFTTrade[]\n    const allowRevert = nftTrades.length == 1 && nftTrades[0].orders.length == 1 ? false : true\n    const planner = new RoutePlanner()\n\n    // track value flow to require the right amount of native value\n    let currentNativeValueInRouter = BigNumber.from(0)\n    let transactionValue = BigNumber.from(0)\n\n    // tracks the input tokens (and ETH) used to buy NFTs to allow us to sweep\n    let nftInputTokens = new Set<string>()\n\n    for (const trade of trades) {\n      /**\n       * is NFTTrade\n       */\n      if (trade.tradeType == RouterTradeType.NFTTrade) {\n        const nftTrade = trade as SupportedNFTTrade\n        nftTrade.encode(planner, { allowRevert })\n        const tradePrice = nftTrade.getTotalPrice()\n\n        if (nftTrade.market == Market.Seaport) {\n          const seaportTrade = nftTrade as SeaportTrade\n          const seaportInputTokens = seaportTrade.getInputTokens()\n          seaportInputTokens.forEach((inputToken) => {\n            nftInputTokens.add(inputToken)\n          })\n        } else {\n          nftInputTokens.add(ETH_ADDRESS)\n        }\n\n        // send enough native value to contract for NFT purchase\n        if (currentNativeValueInRouter.lt(tradePrice)) {\n          transactionValue = transactionValue.add(tradePrice.sub(currentNativeValueInRouter))\n          currentNativeValueInRouter = BigNumber.from(0)\n        } else {\n          currentNativeValueInRouter = currentNativeValueInRouter.sub(tradePrice)\n        }\n        /**\n         * is UniswapTrade\n         */\n      } else if (trade.tradeType == RouterTradeType.UniswapTrade) {\n        const uniswapTrade = trade as UniswapTrade\n        const inputIsNative = uniswapTrade.trade.inputAmount.currency.isNative\n        const outputIsNative = uniswapTrade.trade.outputAmount.currency.isNative\n        const swapOptions = uniswapTrade.options\n\n        invariant(!(inputIsNative && !!swapOptions.inputTokenPermit), 'NATIVE_INPUT_PERMIT')\n\n        if (!!swapOptions.inputTokenPermit) {\n          encodePermit(planner, swapOptions.inputTokenPermit)\n        }\n\n        if (inputIsNative) {\n          transactionValue = transactionValue.add(\n            BigNumber.from(uniswapTrade.trade.maximumAmountIn(swapOptions.slippageTolerance).quotient.toString())\n          )\n        }\n        // track amount of native currency in the router\n        if (outputIsNative && swapOptions.recipient == ROUTER_AS_RECIPIENT) {\n          currentNativeValueInRouter = currentNativeValueInRouter.add(\n            BigNumber.from(uniswapTrade.trade.minimumAmountOut(swapOptions.slippageTolerance).quotient.toString())\n          )\n        }\n        uniswapTrade.encode(planner, { allowRevert: false })\n        /**\n         * is UnwrapWETH\n         */\n      } else if (trade.tradeType == RouterTradeType.UnwrapWETH) {\n        const UnwrapWETH = trade as UnwrapWETH\n        trade.encode(planner, { allowRevert: false })\n        currentNativeValueInRouter = currentNativeValueInRouter.add(UnwrapWETH.amount)\n        /**\n         * is (Un)WrapSTETH\n         */\n      } else if (trade.tradeType == RouterTradeType.WrapSTETH || trade.tradeType == RouterTradeType.UnwrapSTETH) {\n        trade.encode(planner, { allowRevert: false })\n        /**\n         * else\n         */\n      } else {\n        throw 'trade must be of instance: UniswapTrade, NFTTrade, UnwrapWETH, WrapSTETH'\n      }\n    }\n\n    // TODO: matches current logic for now, but should eventually only sweep for multiple NFT trades\n    // or NFT trades with potential slippage (i.e. sudo).\n    // Note: NFTXV2 sends excess ETH to the caller (router), not the specified recipient\n    nftInputTokens.forEach((inputToken) => {\n      planner.addCommand(CommandType.SWEEP, [inputToken, SENDER_AS_RECIPIENT, 0])\n    })\n    return SwapRouter.encodePlan(planner, transactionValue, config)\n  }\n\n  /**\n   * @deprecated in favor of swapCallParameters. Update before next major version 2.0.0\n   * This version does not work correctly for Seaport ERC20->NFT purchases\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given swap.\n   * @param trades to produce call parameters for\n   */\n  public static swapNFTCallParameters(trades: SupportedNFTTrade[], config: SwapRouterConfig = {}): MethodParameters {\n    let planner = new RoutePlanner()\n    let totalPrice = BigNumber.from(0)\n\n    const allowRevert = trades.length == 1 && trades[0].orders.length == 1 ? false : true\n\n    for (const trade of trades) {\n      trade.encode(planner, { allowRevert })\n      totalPrice = totalPrice.add(trade.getTotalPrice())\n    }\n\n    planner.addCommand(CommandType.SWEEP, [ETH_ADDRESS, SENDER_AS_RECIPIENT, 0])\n    return SwapRouter.encodePlan(planner, totalPrice, config)\n  }\n\n  /**\n   * @deprecated in favor of swapCallParameters. Update before next major version 2.0.0\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.\n   * @param trades to produce call parameters for\n   * @param options options for the call parameters\n   */\n  public static swapERC20CallParameters(\n    trades: RouterTrade<Currency, Currency, TradeType>,\n    options: SwapOptions\n  ): MethodParameters {\n    // TODO: use permit if signature included in swapOptions\n    const planner = new RoutePlanner()\n\n    const trade: UniswapTrade = new UniswapTrade(trades, options)\n\n    const inputCurrency = trade.trade.inputAmount.currency\n    invariant(!(inputCurrency.isNative && !!options.inputTokenPermit), 'NATIVE_INPUT_PERMIT')\n\n    if (options.inputTokenPermit) {\n      encodePermit(planner, options.inputTokenPermit)\n    }\n\n    const nativeCurrencyValue = inputCurrency.isNative\n      ? BigNumber.from(trade.trade.maximumAmountIn(options.slippageTolerance).quotient.toString())\n      : BigNumber.from(0)\n\n    trade.encode(planner, { allowRevert: false })\n    return SwapRouter.encodePlan(planner, nativeCurrencyValue, {\n      deadline: options.deadlineOrPreviousBlockhash ? BigNumber.from(options.deadlineOrPreviousBlockhash) : undefined,\n    })\n  }\n\n  /**\n   * Encodes a planned route into a method name and parameters for the Router contract.\n   * @param planner the planned route\n   * @param nativeCurrencyValue the native currency value of the planned route\n   * @param config the router config\n   */\n  private static encodePlan(\n    planner: RoutePlanner,\n    nativeCurrencyValue: BigNumber,\n    config: SwapRouterConfig = {}\n  ): MethodParameters {\n    const { commands, inputs } = planner\n    const functionSignature = !!config.deadline ? 'execute(bytes,bytes[],uint256)' : 'execute(bytes,bytes[])'\n    const parameters = !!config.deadline ? [commands, inputs, config.deadline] : [commands, inputs]\n    const calldata = SwapRouter.INTERFACE.encodeFunctionData(functionSignature, parameters)\n    return { calldata, value: nativeCurrencyValue.toHexString() }\n  }\n}\n","import { TradeConfig } from '../Command'\nimport { NFTTrade, Market, TokenType, BuyItem } from '../NFTTrade'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { BigNumber, BigNumberish } from 'ethers'\n\nexport type CryptopunkData = {\n  tokenId: BigNumberish\n  recipient: string\n  value: BigNumberish\n}\n\nexport class CryptopunkTrade extends NFTTrade<CryptopunkData> {\n  public static CRYPTOPUNK_ADDRESS: string = '0xb47e3cd837ddf8e4c57f05d70ab865de6e193bbb'\n\n  constructor(orders: CryptopunkData[]) {\n    super(Market.Cryptopunks, orders)\n  }\n\n  encode(planner: RoutePlanner, config: TradeConfig): void {\n    for (const item of this.orders) {\n      planner.addCommand(CommandType.CRYPTOPUNKS, [item.tokenId, item.recipient, item.value], config.allowRevert)\n    }\n  }\n\n  getBuyItems(): BuyItem[] {\n    let buyItems: BuyItem[] = []\n    for (const item of this.orders) {\n      buyItems.push({\n        tokenAddress: CryptopunkTrade.CRYPTOPUNK_ADDRESS,\n        tokenId: item.tokenId,\n        tokenType: TokenType.Cryptopunk,\n      })\n    }\n    return buyItems\n  }\n\n  getTotalPrice(): BigNumber {\n    let total = BigNumber.from(0)\n    for (const item of this.orders) {\n      total = total.add(item.value)\n    }\n    return total\n  }\n}\n","import abi from '../../../abis/Foundation.json'\nimport { Interface } from '@ethersproject/abi'\nimport { BuyItem, Market, NFTTrade, TokenType } from '../NFTTrade'\nimport { TradeConfig } from '../Command'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { BigNumber, BigNumberish } from 'ethers'\n\nexport type FoundationData = {\n  recipient: string\n  tokenAddress: string\n  tokenId: BigNumberish\n  price: BigNumberish\n  referrer: string // address\n}\n\nexport class FoundationTrade extends NFTTrade<FoundationData> {\n  public static INTERFACE: Interface = new Interface(abi)\n\n  constructor(orders: FoundationData[]) {\n    super(Market.Foundation, orders)\n  }\n\n  encode(planner: RoutePlanner, config: TradeConfig): void {\n    for (const item of this.orders) {\n      const calldata = FoundationTrade.INTERFACE.encodeFunctionData('buyV2', [\n        item.tokenAddress,\n        item.tokenId,\n        item.price,\n        item.referrer,\n      ])\n      planner.addCommand(\n        CommandType.FOUNDATION,\n        [item.price, calldata, item.recipient, item.tokenAddress, item.tokenId],\n        config.allowRevert\n      )\n    }\n  }\n\n  getBuyItems(): BuyItem[] {\n    let buyItems: BuyItem[] = []\n    for (const item of this.orders) {\n      buyItems.push({\n        tokenAddress: item.tokenAddress,\n        tokenId: item.tokenId,\n        tokenType: TokenType.ERC721,\n      })\n    }\n    return buyItems\n  }\n\n  getTotalPrice(): BigNumber {\n    let total = BigNumber.from(0)\n    for (const item of this.orders) {\n      total = total.add(item.price)\n    }\n    return total\n  }\n}\n","import abi from '../../../abis/LooksRareV2.json'\nimport { Interface } from '@ethersproject/abi'\nimport { BuyItem, Market, NFTTrade, TokenType } from '../NFTTrade'\nimport { TradeConfig } from '../Command'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { BigNumber } from 'ethers'\nimport { ZERO_ADDRESS } from '../../utils/constants'\n\nexport type MakerOrder = {\n  quoteType: number\n  globalNonce: string\n  subsetNonce: string\n  orderNonce: string\n  strategyId: number\n  collectionType: number\n  collection: string\n  currency: string\n  signer: string\n  startTime: number\n  endTime: number\n  price: string\n  itemIds: string[]\n  amounts: string[]\n  additionalParameters: string\n}\n\nexport type TakerOrder = {\n  recipient: string\n  additionalParameters: string\n}\n\nexport type MerkleProof = {\n  value: string\n  position: number\n}\n\nexport type MerkleTree = {\n  root: string\n  proof: MerkleProof[]\n}\n\nexport type LRV2APIOrder = MakerOrder & {\n  id: string\n  hash: string\n  signature: string\n  createdAt: string\n  merkleRoot?: string\n  merkleProof?: MerkleProof[]\n  status: string\n}\n\nexport type LooksRareV2Data = {\n  apiOrder: LRV2APIOrder\n  taker: string\n}\n\nexport class LooksRareV2Trade extends NFTTrade<LooksRareV2Data> {\n  public static INTERFACE: Interface = new Interface(abi)\n  private static ERC721_ORDER = 0\n\n  constructor(orders: LooksRareV2Data[]) {\n    super(Market.LooksRareV2, orders)\n  }\n\n  encode(planner: RoutePlanner, config: TradeConfig): void {\n    const { takerBids, makerOrders, makerSignatures, totalValue, merkleTrees } = this.refactorAPIData(this.orders)\n\n    let calldata\n    if (this.orders.length == 1) {\n      calldata = LooksRareV2Trade.INTERFACE.encodeFunctionData('executeTakerBid', [\n        takerBids[0],\n        makerOrders[0],\n        makerSignatures[0],\n        merkleTrees[0],\n        ZERO_ADDRESS, // affiliate\n      ])\n    } else {\n      calldata = LooksRareV2Trade.INTERFACE.encodeFunctionData('executeMultipleTakerBids', [\n        takerBids,\n        makerOrders,\n        makerSignatures,\n        merkleTrees,\n        ZERO_ADDRESS, // affiliate\n        false, // isAtomic (we deal with this in allowRevert)\n      ])\n    }\n\n    planner.addCommand(CommandType.LOOKS_RARE_V2, [totalValue, calldata], config.allowRevert)\n  }\n\n  getBuyItems(): BuyItem[] {\n    let buyItems: BuyItem[] = []\n    for (const item of this.orders) {\n      const tokenAddress = item.apiOrder.collection\n      const tokenType =\n        item.apiOrder.collectionType == LooksRareV2Trade.ERC721_ORDER ? TokenType.ERC721 : TokenType.ERC1155\n      for (const tokenId of item.apiOrder.itemIds)\n        buyItems.push({\n          tokenAddress,\n          tokenId,\n          tokenType,\n        })\n    }\n    return buyItems\n  }\n\n  getTotalPrice(): BigNumber {\n    let total = BigNumber.from(0)\n    for (const item of this.orders) {\n      total = total.add(item.apiOrder.price)\n    }\n    return total\n  }\n\n  private refactorAPIData(orders: LooksRareV2Data[]): {\n    takerBids: TakerOrder[]\n    makerOrders: MakerOrder[]\n    makerSignatures: string[]\n    totalValue: BigNumber\n    merkleTrees: MerkleTree[]\n  } {\n    let takerBids: TakerOrder[] = []\n    let makerOrders: MakerOrder[] = []\n    let makerSignatures: string[] = []\n    let totalValue: BigNumber = BigNumber.from(0)\n    let merkleTrees: MerkleTree[] = []\n\n    orders.forEach((order) => {\n      makerOrders.push({ ...order.apiOrder })\n\n      makerSignatures.push(order.apiOrder.signature)\n\n      takerBids.push({\n        recipient: order.taker,\n        additionalParameters: '0x',\n      })\n\n      totalValue = totalValue.add(BigNumber.from(order.apiOrder.price))\n\n      merkleTrees.push({\n        root: order.apiOrder.merkleRoot ?? '0x0000000000000000000000000000000000000000000000000000000000000000',\n        proof: order.apiOrder.merkleProof ?? [],\n      })\n    })\n\n    return { takerBids, makerOrders, makerSignatures, totalValue, merkleTrees }\n  }\n}\n","import abi from '../../../abis/NFT20.json'\nimport { Interface } from '@ethersproject/abi'\nimport { TradeConfig } from '../Command'\nimport { NFTTrade, Market, TokenType, BuyItem } from '../NFTTrade'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { BigNumber, BigNumberish } from 'ethers'\n\nexport type NFT20Data = {\n  tokenAddress: string\n  tokenIds: BigNumberish[]\n  tokenAmounts: BigNumberish[]\n  recipient: string\n  fee: BigNumberish\n  isV3: boolean\n  value: BigNumberish\n}\n\nexport class NFT20Trade extends NFTTrade<NFT20Data> {\n  public static INTERFACE: Interface = new Interface(abi)\n\n  constructor(orders: NFT20Data[]) {\n    super(Market.NFT20, orders)\n  }\n\n  encode(planner: RoutePlanner, config: TradeConfig): void {\n    for (const order of this.orders) {\n      const calldata = NFT20Trade.INTERFACE.encodeFunctionData('ethForNft', [\n        order.tokenAddress,\n        order.tokenIds,\n        order.tokenAmounts,\n        order.recipient,\n        order.fee,\n        order.isV3,\n      ])\n      planner.addCommand(CommandType.NFT20, [order.value, calldata], config.allowRevert)\n    }\n  }\n\n  getBuyItems(): BuyItem[] {\n    let buyItems: BuyItem[] = []\n    for (const pool of this.orders) {\n      for (const tokenId of pool.tokenIds) {\n        buyItems.push({\n          tokenAddress: pool.tokenAddress,\n          tokenId: tokenId,\n          tokenType: TokenType.ERC721,\n        })\n      }\n    }\n\n    return buyItems\n  }\n\n  getTotalPrice(): BigNumber {\n    let total = BigNumber.from(0)\n    for (const item of this.orders) {\n      total = total.add(item.value)\n    }\n    return total\n  }\n}\n","import abi from '../../../abis/NFTXZap.json'\nimport { Interface } from '@ethersproject/abi'\nimport { BuyItem, Market, NFTTrade, TokenType } from '../NFTTrade'\nimport { TradeConfig } from '../Command'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { BigNumber, BigNumberish } from 'ethers'\n\nexport type NFTXData = {\n  recipient: string\n  vaultId: BigNumberish\n  tokenAddress: string\n  tokenIds: BigNumberish[]\n  value: BigNumber\n  swapCalldata: string\n}\n\nexport class NFTXTrade extends NFTTrade<NFTXData> {\n  public static INTERFACE: Interface = new Interface(abi)\n\n  constructor(orders: NFTXData[]) {\n    super(Market.NFTX, orders)\n  }\n\n  encode(planner: RoutePlanner, config: TradeConfig): void {\n    for (const order of this.orders) {\n      const calldata = NFTXTrade.INTERFACE.encodeFunctionData('buyAndRedeem', [\n        order.vaultId,\n        order.tokenIds.length,\n        order.tokenIds,\n        order.swapCalldata,\n        order.recipient,\n      ])\n\n      planner.addCommand(CommandType.NFTX, [order.value, calldata], config.allowRevert)\n    }\n  }\n\n  getBuyItems(): BuyItem[] {\n    let buyItems: BuyItem[] = []\n    for (const order of this.orders) {\n      for (const tokenId of order.tokenIds) {\n        buyItems.push({\n          tokenAddress: order.tokenAddress,\n          tokenId: tokenId,\n          tokenType: TokenType.ERC721,\n        })\n      }\n    }\n    return buyItems\n  }\n\n  getTotalPrice(): BigNumber {\n    let total = BigNumber.from(0)\n    for (const item of this.orders) {\n      total = total.add(item.value)\n    }\n    return total\n  }\n}\n","import { BigNumber, BigNumberish } from 'ethers'\nimport { Interface } from '@ethersproject/abi'\nimport abi from '../../../abis/Seaport.json'\nimport { BuyItem, Market, NFTTrade, TokenType } from '../NFTTrade'\nimport { TradeConfig } from '../Command'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { encodeInputTokenOptions, Permit2Permit } from '../../utils/inputTokens'\nimport { ETH_ADDRESS } from '../../utils/constants'\n\nexport type SeaportData = {\n  items: Order[]\n  recipient: string // address\n  protocolAddress: string\n  inputTokenProcessing?: InputTokenProcessing[]\n}\n\nexport type InputTokenProcessing = {\n  token: string\n  permit2Permit?: Permit2Permit\n  protocolApproval: boolean\n  permit2TransferFrom: boolean\n}\n\nexport type FulfillmentComponent = {\n  orderIndex: BigNumberish\n  itemIndex: BigNumberish\n}\n\nexport type OfferItem = {\n  itemType: BigNumberish // enum\n  token: string // address\n  identifierOrCriteria: BigNumberish\n  startAmount: BigNumberish\n  endAmount: BigNumberish\n}\n\nexport type ConsiderationItem = OfferItem & {\n  recipient: string\n}\n\nexport type Order = {\n  parameters: OrderParameters\n  signature: string\n}\n\ntype OrderParameters = {\n  offerer: string // address,\n  offer: OfferItem[]\n  consideration: ConsiderationItem[]\n  orderType: BigNumberish // enum\n  startTime: BigNumberish\n  endTime: BigNumberish\n  zoneHash: string // bytes32\n  zone: string // address\n  salt: BigNumberish\n  conduitKey: string // bytes32,\n  totalOriginalConsiderationItems: BigNumberish\n}\n\nexport type AdvancedOrder = Order & {\n  numerator: BigNumber // uint120\n  denominator: BigNumber // uint120\n  extraData: string // bytes\n}\n\nexport class SeaportTrade extends NFTTrade<SeaportData> {\n  public static INTERFACE: Interface = new Interface(abi)\n  public static OPENSEA_CONDUIT_KEY: string = '0x0000007b02230091a7ed01230072f7006a004d60a8d4e71d599b8104250f0000'\n\n  constructor(orders: SeaportData[]) {\n    super(Market.Seaport, orders)\n  }\n\n  encode(planner: RoutePlanner, config: TradeConfig): void {\n    for (const order of this.orders) {\n      let advancedOrders: AdvancedOrder[] = []\n      let orderFulfillments: FulfillmentComponent[][] = order.items.map((_, index) => [\n        { orderIndex: index, itemIndex: 0 },\n      ])\n      let considerationFulFillments: FulfillmentComponent[][] = this.getConsiderationFulfillments(order.items)\n\n      for (const item of order.items) {\n        const { advancedOrder } = this.getAdvancedOrderParams(item)\n        advancedOrders.push(advancedOrder)\n      }\n\n      let calldata: string\n      if (advancedOrders.length == 1) {\n        calldata = SeaportTrade.INTERFACE.encodeFunctionData('fulfillAdvancedOrder', [\n          advancedOrders[0],\n          [],\n          SeaportTrade.OPENSEA_CONDUIT_KEY,\n          order.recipient,\n        ])\n      } else {\n        calldata = SeaportTrade.INTERFACE.encodeFunctionData('fulfillAvailableAdvancedOrders', [\n          advancedOrders,\n          [],\n          orderFulfillments,\n          considerationFulFillments,\n          SeaportTrade.OPENSEA_CONDUIT_KEY,\n          order.recipient,\n          100, // TODO: look into making this a better number\n        ])\n      }\n\n      if (!!order.inputTokenProcessing) {\n        for (const inputToken of order.inputTokenProcessing)\n          encodeInputTokenOptions(planner, {\n            approval: inputToken.protocolApproval\n              ? { token: inputToken.token, protocol: order.protocolAddress }\n              : undefined,\n            permit2Permit: inputToken.permit2Permit,\n            permit2TransferFrom: inputToken.permit2TransferFrom\n              ? { token: inputToken.token, amount: this.getTotalOrderPrice(order, inputToken.token).toString() }\n              : undefined,\n          })\n      }\n\n      planner.addCommand(\n        this.commandMap(order.protocolAddress),\n        [this.getTotalOrderPrice(order, ETH_ADDRESS).toString(), calldata],\n        config.allowRevert\n      )\n    }\n  }\n\n  getBuyItems(): BuyItem[] {\n    let buyItems: BuyItem[] = []\n    for (const order of this.orders) {\n      for (const item of order.items) {\n        for (const offer of item.parameters.offer) {\n          buyItems.push({\n            tokenAddress: offer.token,\n            tokenId: offer.identifierOrCriteria,\n            tokenType: TokenType.ERC721,\n          })\n        }\n      }\n    }\n    return buyItems\n  }\n\n  getInputTokens(): Set<string> {\n    let inputTokens = new Set<string>()\n    for (const order of this.orders) {\n      for (const item of order.items) {\n        for (const consideration of item.parameters.consideration) {\n          const token = consideration.token.toLowerCase()\n          inputTokens.add(token)\n        }\n      }\n    }\n    return inputTokens\n  }\n\n  getTotalOrderPrice(order: SeaportData, token: string = ETH_ADDRESS): BigNumber {\n    let totalOrderPrice = BigNumber.from(0)\n    for (const item of order.items) {\n      totalOrderPrice = totalOrderPrice.add(this.calculateValue(item.parameters.consideration, token))\n    }\n    return totalOrderPrice\n  }\n\n  getTotalPrice(token: string = ETH_ADDRESS): BigNumber {\n    let totalPrice = BigNumber.from(0)\n    for (const order of this.orders) {\n      for (const item of order.items) {\n        totalPrice = totalPrice.add(this.calculateValue(item.parameters.consideration, token))\n      }\n    }\n    return totalPrice\n  }\n\n  private commandMap(protocolAddress: string): CommandType {\n    switch (protocolAddress.toLowerCase()) {\n      case '0x00000000000000adc04c56bf30ac9d3c0aaf14dc': // Seaport v1.5\n        return CommandType.SEAPORT_V1_5\n      case '0x00000000000001ad428e4906ae43d8f9852d0dd6': // Seaport v1.4\n        return CommandType.SEAPORT_V1_4\n      default:\n        throw new Error('unsupported Seaport address')\n    }\n  }\n\n  private getConsiderationFulfillments(protocolDatas: Order[]): FulfillmentComponent[][] {\n    let considerationFulfillments: FulfillmentComponent[][] = []\n    const considerationRecipients: string[] = []\n\n    for (const i in protocolDatas) {\n      const protocolData = protocolDatas[i]\n\n      for (const j in protocolData.parameters.consideration) {\n        const item = protocolData.parameters.consideration[j]\n\n        if (considerationRecipients.findIndex((x) => x === item.recipient) === -1) {\n          considerationRecipients.push(item.recipient)\n        }\n\n        const recipientIndex = considerationRecipients.findIndex((x) => x === item.recipient)\n\n        if (!considerationFulfillments[recipientIndex]) {\n          considerationFulfillments.push([\n            {\n              orderIndex: i,\n              itemIndex: j,\n            },\n          ])\n        } else {\n          considerationFulfillments[recipientIndex].push({\n            orderIndex: i,\n            itemIndex: j,\n          })\n        }\n      }\n    }\n    return considerationFulfillments\n  }\n\n  private getAdvancedOrderParams(data: Order): { advancedOrder: AdvancedOrder } {\n    const advancedOrder = {\n      parameters: data.parameters,\n      numerator: BigNumber.from('1'),\n      denominator: BigNumber.from('1'),\n      signature: data.signature,\n      extraData: '0x00',\n    }\n    return { advancedOrder }\n  }\n\n  private calculateValue(considerations: ConsiderationItem[], token: string): BigNumber {\n    return considerations.reduce(\n      (amt: BigNumber, consideration: ConsiderationItem) =>\n        consideration.token.toLowerCase() == token.toLowerCase() ? amt.add(consideration.startAmount) : amt,\n      BigNumber.from(0)\n    )\n  }\n}\n","import abi from '../../../abis/Sudoswap.json'\nimport { Interface } from '@ethersproject/abi'\nimport { BuyItem, Market, NFTTrade, TokenType } from '../NFTTrade'\nimport { TradeConfig } from '../Command'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { BigNumber, BigNumberish } from 'ethers'\n\ntype PairSwap = {\n  swapInfo: {\n    pair: string // address\n    nftIds: BigNumberish[]\n  }\n  tokenAddress: string // address\n  maxCost: BigNumberish\n}\n\nexport type SudoswapData = {\n  swaps: PairSwap[]\n  nftRecipient: string\n  ethRecipient: string\n  deadline: BigNumberish\n}\n\nexport class SudoswapTrade extends NFTTrade<SudoswapData> {\n  public static INTERFACE: Interface = new Interface(abi)\n\n  constructor(orders: SudoswapData[]) {\n    super(Market.Sudoswap, orders)\n  }\n\n  encode(planner: RoutePlanner, config: TradeConfig): void {\n    for (const order of this.orders) {\n      const calldata = SudoswapTrade.INTERFACE.encodeFunctionData('robustSwapETHForSpecificNFTs', [\n        order.swaps.map((swap) => {\n          return { swapInfo: swap.swapInfo, maxCost: swap.maxCost }\n        }),\n        order.ethRecipient,\n        order.nftRecipient,\n        order.deadline,\n      ])\n      const value = order.swaps.reduce((prevVal, swap) => {\n        return prevVal.add(swap.maxCost)\n      }, BigNumber.from(0))\n      planner.addCommand(CommandType.SUDOSWAP, [value, calldata], config.allowRevert)\n    }\n  }\n\n  getBuyItems(): BuyItem[] {\n    let buyItems: BuyItem[] = []\n    for (const order of this.orders) {\n      for (const swap of order.swaps) {\n        for (const tokenId of swap.swapInfo.nftIds) {\n          buyItems.push({\n            tokenAddress: swap.tokenAddress,\n            tokenId,\n            tokenType: TokenType.ERC721,\n          })\n        }\n      }\n    }\n    return buyItems\n  }\n\n  getTotalPrice(): BigNumber {\n    let total = BigNumber.from(0)\n    for (const order of this.orders) {\n      for (const swap of order.swaps) {\n        total = total.add(swap.maxCost)\n      }\n    }\n    return total\n  }\n}\n","import abi from '../../../abis/X2Y2.json'\nimport { Interface } from '@ethersproject/abi'\nimport { BuyItem, Market, NFTTrade, TokenType } from '../NFTTrade'\nimport { TradeConfig } from '../Command'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { BigNumber, BigNumberish } from 'ethers'\n\ntype X2Y2PartialData = {\n  signedInput: string\n  recipient: string\n  tokenAddress: string\n  tokenId: BigNumberish\n  price: BigNumberish\n}\n\nexport type X2Y2_721_Data = X2Y2PartialData & {\n  tokenType: TokenType.ERC721\n}\n\nexport type X2Y2_1155_Data = X2Y2PartialData & {\n  tokenType: TokenType.ERC1155\n  tokenAmount: BigNumberish\n}\n\nexport type X2Y2Data = X2Y2_721_Data | X2Y2_1155_Data\n\nexport class X2Y2Trade extends NFTTrade<X2Y2Data> {\n  public static INTERFACE: Interface = new Interface(abi)\n\n  constructor(orders: X2Y2Data[]) {\n    super(Market.X2Y2, orders)\n  }\n\n  encode(planner: RoutePlanner, config: TradeConfig): void {\n    for (const item of this.orders) {\n      const functionSelector = X2Y2Trade.INTERFACE.getSighash(X2Y2Trade.INTERFACE.getFunction('run'))\n      const calldata = functionSelector + item.signedInput.slice(2)\n\n      if (item.tokenType == TokenType.ERC721) {\n        planner.addCommand(\n          CommandType.X2Y2_721,\n          [item.price, calldata, item.recipient, item.tokenAddress, item.tokenId],\n          config.allowRevert\n        )\n      } else if (item.tokenType == TokenType.ERC1155) {\n        planner.addCommand(\n          CommandType.X2Y2_1155,\n          [item.price, calldata, item.recipient, item.tokenAddress, item.tokenId, item.tokenAmount],\n          config.allowRevert\n        )\n      }\n    }\n  }\n\n  getBuyItems(): BuyItem[] {\n    let buyItems: BuyItem[] = []\n    for (const item of this.orders) {\n      buyItems.push({\n        tokenAddress: item.tokenAddress,\n        tokenId: item.tokenId,\n        tokenType: item.tokenType,\n      })\n    }\n    return buyItems\n  }\n\n  getTotalPrice(): BigNumber {\n    let total = BigNumber.from(0)\n    for (const item of this.orders) {\n      total = total.add(item.price)\n    }\n    return total\n  }\n}\n","import invariant from 'tiny-invariant'\nimport { BigNumberish } from 'ethers'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { encodeInputTokenOptions, Permit2Permit } from '../../utils/inputTokens'\nimport { Command, RouterTradeType, TradeConfig } from '../Command'\nimport { ROUTER_AS_RECIPIENT, WETH_ADDRESS } from '../../utils/constants'\n\nexport class UnwrapWETH implements Command {\n  readonly tradeType: RouterTradeType = RouterTradeType.UnwrapWETH\n  readonly permit2Data: Permit2Permit\n  readonly wethAddress: string\n  readonly amount: BigNumberish\n\n  constructor(amount: BigNumberish, chainId: number, permit2?: Permit2Permit) {\n    this.wethAddress = WETH_ADDRESS(chainId)\n    this.amount = amount\n\n    if (!!permit2) {\n      invariant(\n        permit2.details.token.toLowerCase() === this.wethAddress.toLowerCase(),\n        `must be permitting WETH address: ${this.wethAddress}`\n      )\n      invariant(permit2.details.amount >= amount, `Did not permit enough WETH for unwrapWETH transaction`)\n      this.permit2Data = permit2\n    }\n  }\n\n  encode(planner: RoutePlanner, _: TradeConfig): void {\n    encodeInputTokenOptions(planner, {\n      permit2Permit: this.permit2Data,\n      permit2TransferFrom: {\n        token: this.wethAddress,\n        amount: this.amount.toString(),\n      },\n    })\n    planner.addCommand(CommandType.UNWRAP_WETH, [ROUTER_AS_RECIPIENT, this.amount])\n  }\n}\n","import invariant from 'tiny-invariant'\nimport { BigNumberish } from 'ethers'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { encodeInputTokenOptions, Permit2Permit } from '../../utils/inputTokens'\nimport { Command, RouterTradeType, TradeConfig } from '../Command'\nimport { CONTRACT_BALANCE, ROUTER_AS_RECIPIENT, STETH_ADDRESS } from '../../utils/constants'\n\nexport class WrapSTETH implements Command {\n  readonly tradeType: RouterTradeType = RouterTradeType.WrapSTETH\n  readonly permit2Data: Permit2Permit\n  readonly stethAddress: string\n  readonly amount: BigNumberish\n  readonly wrapAmount: BigNumberish\n\n  constructor(amount: BigNumberish, chainId: number, permit2?: Permit2Permit, wrapAmount?: BigNumberish) {\n    this.stethAddress = STETH_ADDRESS(chainId)\n    this.amount = amount\n    this.wrapAmount = wrapAmount ?? CONTRACT_BALANCE\n\n    if (!!permit2) {\n      invariant(\n        permit2.details.token.toLowerCase() === this.stethAddress.toLowerCase(),\n        `must be permitting STETH address: ${this.stethAddress}`\n      )\n      invariant(permit2.details.amount >= amount, `Did not permit enough STETH for unwrapSTETH transaction`)\n      this.permit2Data = permit2\n    }\n  }\n\n  encode(planner: RoutePlanner, _: TradeConfig): void {\n    encodeInputTokenOptions(planner, {\n      permit2Permit: this.permit2Data,\n      permit2TransferFrom: {\n        token: this.stethAddress,\n        amount: this.amount.toString(),\n      },\n    })\n    planner.addCommand(CommandType.WRAP_STETH, [ROUTER_AS_RECIPIENT, this.wrapAmount])\n  }\n}\n","import invariant from 'tiny-invariant'\nimport { BigNumberish } from 'ethers'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { Command, RouterTradeType, TradeConfig } from '../Command'\nimport { STETH_ADDRESS, NOT_SUPPORTED_ON_CHAIN } from '../../utils/constants'\n\nexport class UnwrapSTETH implements Command {\n  readonly tradeType: RouterTradeType = RouterTradeType.UnwrapSTETH\n  readonly recipient: string\n  readonly amountMinimum: BigNumberish\n\n  constructor(recipient: string, amountMinimum: BigNumberish, chainId: number) {\n    this.recipient = recipient\n    this.amountMinimum = amountMinimum\n    invariant(STETH_ADDRESS(chainId) != NOT_SUPPORTED_ON_CHAIN, `STETH not supported on chain ${chainId}`)\n  }\n\n  encode(planner: RoutePlanner, _: TradeConfig): void {\n    planner.addCommand(CommandType.UNWRAP_STETH, [this.recipient, this.amountMinimum])\n  }\n}\n"],"names":["RouterTradeType","NFTTrade","market","orders","length","process","invariant","Market","TokenType","CommandType","ALLOW_REVERT_FLAG","REVERTIBLE_COMMANDS","Set","SEAPORT_V1_5","SEAPORT_V1_4","NFTX","LOOKS_RARE_V2","X2Y2_721","X2Y2_1155","FOUNDATION","SUDOSWAP","NFT20","EXECUTE_SUB_PLAN","CRYPTOPUNKS","ELEMENT_MARKET","PERMIT_STRUCT","PERMIT_BATCH_STRUCT","PERMIT2_TRANSFER_FROM_STRUCT","PERMIT2_TRANSFER_FROM_BATCH_STRUCT","ABI_DEFINITION","_ABI_DEFINITION","PERMIT2_PERMIT","PERMIT2_PERMIT_BATCH","PERMIT2_TRANSFER_FROM","PERMIT2_TRANSFER_FROM_BATCH","V3_SWAP_EXACT_IN","V3_SWAP_EXACT_OUT","V2_SWAP_EXACT_IN","V2_SWAP_EXACT_OUT","WRAP_ETH","UNWRAP_WETH","SWEEP","SWEEP_ERC721","SWEEP_ERC1155","TRANSFER","PAY_PORTION","BALANCE_CHECK_ERC20","OWNER_CHECK_721","OWNER_CHECK_1155","APPROVE_ERC20","WRAP_STETH","UNWRAP_STETH","RoutePlanner","commands","inputs","_proto","prototype","addSubPlan","subplan","addCommand","type","parameters","allowRevert","command","createCommand","push","encodedInput","has","Error","concat","toString","padStart","defaultAbiCoder","encode","NOT_SUPPORTED_ON_CHAIN","CHAIN_CONFIGS","_CHAIN_CONFIGS","router","weth","steth","wsteth","creationBlock","UNIVERSAL_ROUTER_ADDRESS","chainId","UNIVERSAL_ROUTER_CREATION_BLOCK","WETH_ADDRESS","STETH_ADDRESS","PERMIT2_ADDRESS","CONTRACT_BALANCE","BigNumber","from","pow","ETH_ADDRESS","ZERO_ADDRESS","SENDER_AS_RECIPIENT","ROUTER_AS_RECIPIENT","OPENSEA_CONDUIT_SPENDER_ID","SUDOSWAP_SPENDER_ID","encodeFeeBips","fee","toHex","multiply","quotient","REFUND_ETH_PRICE_IMPACT_THRESHOLD","Percent","UniswapTrade","trade","options","flatFee","planner","_config","payerIsUser","payerIsRouter","inputAmount","currency","isNative","maximumAmountIn","slippageTolerance","recipient","_this$options$recipie","performAggregatedSlippageCheck","tradeType","TradeType","EXACT_INPUT","routes","outputIsNative","outputAmount","inputIsNative","routerMustCustody","hasFeeOption","_iterator","_createForOfIteratorHelperLoose","swaps","_step","done","swap","value","route","protocol","Protocol","V2","addV2Swap","V3","addV3Swap","MIXED","addMixedSwap","minimumAmountOut","feeBips","wrapped","address","EXACT_OUTPUT","sub","mul","div","feeAmount","amount","lt","riskOfPartialFill","_ref","V2Trade","path","map","pool","_ref2","V3Trade","createUncheckedTrade","encodeRouteToPath","tradeRecipient","pools","Pool","Pair","MixedRouteTrade","amountIn","amountOut","sections","partitionMixedRouteByProtocol","isLastSectionInRoute","i","outputToken","inputToken","input","section","getOutputOfPools","newRouteOriginal","MixedRouteSDK","token0","equals","token1","newRoute","MixedRoute","mixedRouteIsAllV3","every","encodeMixedRouteToPath","liquidityToken","priceImpact","greaterThan","swapOptions","SIGNATURE_LENGTH","EIP_2098_SIGNATURE_LENGTH","encodePermit","permit2","signature","ethers","utils","arrayify","joinSignature","splitSignature","encodeInputTokenOptions","approval","permit2Permit","token","details","permit2TransferFrom","mapApprovalProtocol","protocolAddress","toLowerCase","SwapRouter","swapCallParameters","trades","config","Array","isArray","nftTrades","filter","_","hasOwnProperty","currentNativeValueInRouter","transactionValue","nftInputTokens","nftTrade","tradePrice","getTotalPrice","Seaport","seaportTrade","seaportInputTokens","getInputTokens","forEach","add","uniswapTrade","inputTokenPermit","UnwrapWETH","WrapSTETH","UnwrapSTETH","encodePlan","swapNFTCallParameters","totalPrice","_iterator2","_step2","swapERC20CallParameters","inputCurrency","nativeCurrencyValue","deadline","deadlineOrPreviousBlockhash","undefined","functionSignature","calldata","INTERFACE","encodeFunctionData","toHexString","Interface","abi","CryptopunkTrade","_NFTTrade","_inheritsLoose","call","Cryptopunks","item","tokenId","getBuyItems","buyItems","tokenAddress","CRYPTOPUNK_ADDRESS","tokenType","Cryptopunk","total","_iterator3","_step3","FoundationTrade","Foundation","price","referrer","ERC721","LooksRareV2Trade","LooksRareV2","_this$refactorAPIData","refactorAPIData","takerBids","makerOrders","makerSignatures","totalValue","merkleTrees","apiOrder","collection","collectionType","ERC721_ORDER","ERC1155","itemIds","order","_extends","taker","additionalParameters","root","_order$apiOrder$merkl","merkleRoot","proof","_order$apiOrder$merkl2","merkleProof","NFT20Trade","tokenIds","tokenAmounts","isV3","_iterator4","_step4","NFTXTrade","vaultId","swapCalldata","SeaportTrade","advancedOrders","orderFulfillments","items","index","orderIndex","itemIndex","considerationFulFillments","getConsiderationFulfillments","_this$getAdvancedOrde","getAdvancedOrderParams","advancedOrder","OPENSEA_CONDUIT_KEY","inputTokenProcessing","protocolApproval","getTotalOrderPrice","commandMap","_iterator5","_step5","_iterator6","offer","_step6","identifierOrCriteria","inputTokens","_iterator7","_step7","_iterator8","_step8","_iterator9","consideration","_step9","totalOrderPrice","_iterator10","_step10","calculateValue","_iterator11","_step11","_iterator12","_step12","protocolDatas","considerationFulfillments","considerationRecipients","protocolData","_loop","j","findIndex","x","recipientIndex","data","numerator","denominator","extraData","considerations","reduce","amt","startAmount","SudoswapTrade","Sudoswap","swapInfo","maxCost","ethRecipient","nftRecipient","prevVal","nftIds","X2Y2Trade","X2Y2","functionSelector","getSighash","getFunction","signedInput","slice","tokenAmount","wethAddress","permit2Data","wrapAmount","stethAddress","amountMinimum"],"mappings":"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"}